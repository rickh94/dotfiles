
# 2017-08-14 22:48:08.286577
+def main():
+    print('hi')

# 2017-08-14 22:48:22.114293
+main()

# 2017-08-14 22:48:44.029215
+quit

# 2017-08-15 23:07:24.419572
+import digitalocean

# 2017-08-15 23:13:07.756037
+from subprocess import run

# 2017-08-15 23:13:49.847742
+import subprocess

# 2017-08-15 23:14:35.858859
+get_token = subprocess.run(['pass', 'show', 'digitalocean/couperin-do-token'],
+                           stdout=subprocess.PIPE)

# 2017-08-15 23:14:42.309048
+get_token.stdout

# 2017-08-15 23:16:45.609030
+token_ = str(get_token.stdout).strip

# 2017-08-15 23:16:47.380230
+token_

# 2017-08-15 23:16:52.124313
+token_ = str(get_token.stdout).strip()

# 2017-08-15 23:16:53.973464
+token_

# 2017-08-15 23:17:39.319161
+token_ = token_.decode('UTF-8')

# 2017-08-15 23:18:07.395646
+my_token = get_token.stdout.decode('utf-8').strip()

# 2017-08-15 23:18:10.359987
+my_token

# 2017-08-15 23:19:33.869170
+droplet = digitalocean.Droplet(token=my_token,
+                               name='mytestdroplet',
+                               region='nyc3',
+                               image='ubuntu-14-04-x64',
+                               size_slug='512mb',
+                               )

# 2017-08-15 23:19:36.680554
+droplet.create

# 2017-08-15 23:19:41.364886
+droplet.create()

# 2017-08-15 23:19:55.924484
+actions = droplet.get_actions()

# 2017-08-15 23:20:47.617401
+for action in actions:
+    action.load()
+    print(action.status)

# 2017-08-15 23:21:30.483068
+manager = digitalocean.Manager(token=my_token)

# 2017-08-15 23:21:41.070800
+my_droplets = manager.get_all_droplets()

# 2017-08-15 23:21:47.664382
+print(my_droplets)

# 2017-08-15 23:22:49.894862
+droplet.destroy()

# 2017-08-15 23:22:53.385054
+my_droplets = manager.get_all_droplets()

# 2017-08-15 23:22:55.840695
+print(my_droplets)

# 2017-08-15 23:24:05.235238
+from digitalocean import SSHKey

# 2017-08-15 23:27:40.291855
+from crypto.PublicKey import RSA

# 2017-08-15 23:27:55.877221
+from Crypto.PublicKey import RSA

# 2017-08-15 23:30:23.994119
+import crypto

# 2017-08-15 23:30:31.550588
+crypto.PublicKey

# 2017-08-15 23:32:04.334171
+from Crypto.PublicKey import RSA

# 2017-08-15 23:32:08.868480
+import digitalocean

# 2017-08-15 23:32:25.439306
+key = RSA.generate(4096)

# 2017-08-15 23:32:27.292305
+key

# 2017-08-16 00:05:04.470745
+from Crypto.PublicKey import RSA

# 2017-08-16 00:06:29.081106
+key = RSA.generate(4096)

# 2017-08-16 00:06:30.265298
+key

# 2017-08-16 00:06:37.919392
+key.exportKey('PEM')

# 2017-08-16 00:07:11.594624
+with open('testkey', 'w') as f:
+    f.write(key.exportKey('PEM'))

# 2017-08-16 00:07:24.176351
+with open('testkey', 'wb') as f:
+    f.write(key.exportKey('PEM'))

# 2017-08-16 00:08:06.908418
+pubkey = key.publickey()

# 2017-08-16 00:08:11.669777
+pubkey

# 2017-08-16 00:08:23.206205
+print(pubkey.exportKey('OpenSSH'))

# 2017-08-16 00:08:42.575201
+pubkey.exportKey('OpenSSH')

# 2017-08-16 00:39:59.556944
+import os

# 2017-08-16 00:40:03.213381
+import digitalocean

# 2017-08-16 00:40:29.268633
+access_token = os.environ['DO_KEY']

# 2017-08-16 00:40:49.914126
+manager = digitalocean.Manager(token=access_token)

# 2017-08-16 00:41:21.241540
+keys = manager.get_all_sshkeys()

# 2017-08-16 00:41:23.156506
+keys
# 2017-08-15 02:47:36.672504
+from slackperson import SlackPerson

# 2017-08-15 02:48:50.760577
+test = SlackPerson('me', {'members': [ {'name': 'me', 'id': '1'}, {'name': 'notme', 'id': '2'} ] })

# 2017-08-15 02:48:54.571344
+test.name

# 2017-08-15 02:48:58.228561
+test.username

# 2017-08-15 02:49:01.598013
+test.userid

# 2017-08-15 02:49:13.392934
+test2 = SlackPerson('notme', {'members': [ {'name': 'me', 'id': '1'}, {'name': 'notme', 'id': '2'} ] })

# 2017-08-15 02:49:21.062884
+assert test2.userid == '2'

# 2017-08-15 02:49:34.537224
+assert test2.userid == '1'

# 2017-08-15 02:49:37.127780
+assert test2.userid == '2'

# 2017-08-15 02:49:43.774502
+assert test.userid =='1'

# 2017-08-15 02:50:13.312372
+from .slackperson import SlackPerson

# 2017-08-15 02:50:17.699962
+exit

# 2017-08-15 02:50:33.486604
+from .slackperson import SlackPerson

# 2017-08-15 02:50:49.125067
+from slackperson import SlackPerson

# 2017-08-15 02:51:39.449459
+import slackperson

# 2017-08-16 01:14:52.371391
+import digitalocean

# 2017-08-16 01:15:04.841407
+import os

# 2017-08-16 01:15:16.809737
+tok = os.environ['DO_API_TOKEN']

# 2017-08-16 01:15:18.659973
+tok

# 2017-08-16 01:15:30.683015
+man = digitalocean.Manager(token=tok)

# 2017-08-16 01:15:53.280884
+man.get_all_sshkeys()

# 2017-08-16 01:16:02.245085
+keys = man.get_all_sshkeys()

# 2017-08-16 01:16:04.922580
+keys[1]

# 2017-08-16 01:16:39.826347
+keys[1].__dict__

# 2017-08-16 01:16:52.367873
+keys[1].id

# 2017-08-16 01:17:30.784678
+for key in keys:
+    if key.name == 'fellow_keyboards_civilian_acre':
+        print(key.id)

# 2017-08-16 01:17:58.128884
+for key in keys:
+    if key.name == 'fellows_keyboards_civilian_acre':
+        print(key.id)

# 2017-08-16 01:27:23.427957
+import digitalocean

# 2017-08-16 01:27:36.993087
+import os

# 2017-08-16 01:27:47.881671
+tok = os.environ['DO_API_TOKEN']

# 2017-08-16 01:27:56.130306
+manger = digitalocean.Manager(token=tok)

# 2017-08-16 01:28:01.073845
+manager.get_all_droplets()

# 2017-08-16 01:28:07.358890
+manager = digitalocean.Manager(token=tok)

# 2017-08-16 01:28:09.721939
+manager.get_all_droplets()

# 2017-08-16 01:28:27.227550
+drops = manager.get_all_droplets()

# 2017-08-16 01:28:31.844606
+drops[1].__dict__

# 2017-08-16 01:28:42.538961
+drops[0].__dict__

# 2017-08-16 01:28:47.947648
+import json

# 2017-08-16 01:29:15.218076
+print(json.dumps(drops[0].__dict__, indent=4))

# 2017-08-16 01:29:24.901027
+drops[0].__dict__

# 2017-08-16 01:31:59.142366
+drops[0].name

# 2017-08-16 01:32:06.827682
+drops[0].networks

# 2017-08-16 01:32:15.323570
+drops[0].networks['v4']

# 2017-08-16 01:32:21.191987
+drops[0].networks['v4']['ip_address']

# 2017-08-16 01:32:28.639766
+drops[0].networks['v4'][0]['ip_address']

# 2017-08-16 01:33:16.249607
+for drop in drops:
+    if drop.name == 'testSSHdroplet':
+        print(drop.networks['v4'][0]['ip_address'])

# 2017-08-16 22:47:03.046854
+from subprocess import check_output

# 2017-08-16 22:47:24.948002
+check_output(['ssh-agent',name])

# 2017-08-16 22:47:38.886656
+check_output(['pidof','ssh-agent'])

# 2017-08-16 22:57:47.849114
+import digitalocean

# 2017-08-16 22:58:03.987428
+import os

# 2017-08-16 22:58:20.953876
+manager = digitalocean.manager(token=os.environ['DO_API_TOKEN'])

# 2017-08-16 22:58:28.433927
+manager = digitalocean.Manager(token=os.environ['DO_API_TOKEN'])

# 2017-08-16 22:58:34.398967
+manager.get_all_droplets

# 2017-08-16 22:58:43.283584
+drops = manager.get_all_droplets()

# 2017-08-16 22:58:44.761553
+drops

# 2017-08-16 22:58:54.183511
+drops[0].networks['v4']

# 2017-08-16 22:59:00.798776
+drops[0].networks['v4'][0]['ip_address']

# 2017-08-16 23:00:10.777807
+drop = digitalocean.Droplet(token=os.environt['DO_API_TOKEN'],
+                            name='testdrop',
+                            region='nyc3',
+                            image='ubuntu-16-04-x64',
+                            size_slug='512mb',
+                            backups=False,
+                            )

# 2017-08-16 23:00:21.825277
+drop = digitalocean.Droplet(token=os.environ['DO_API_TOKEN'],
+                            name='testdrop',
+                            region='nyc3',
+                            image='ubuntu-16-04-x64',
+                            size_slug='512mb',
+                            backups=False,
+                            )

# 2017-08-16 23:00:32.461929
+drop.create()

# 2017-08-16 23:00:41.693200
+drops=manager.get_all_droplets()

# 2017-08-16 23:01:08.376796
+for drop in drops:
+    if drop.name == 'testdrop':
+        print(drop.networks['v4'][0]['ip_address'])

# 2017-08-16 23:03:50.969397
+myvar = b'5'

# 2017-08-16 23:03:54.188345
+int(myvar)

# 2017-08-17 00:07:55.624203
+exit

# 2017-08-17 22:45:55.911628
+class TestClass(object):
+    def __init__(self):
+        self.name = 'testkey'
+        self.id = '99999'

# 2017-08-17 22:46:03.220422
+test = TestClass()

# 2017-08-17 22:46:05.169585
+test.name

# 2017-08-17 22:46:06.646655
+test.id
# 2017-08-18 00:10:53.957024
+import test_dosockstunnel

# 2017-08-18 00:11:04.807728
+hi = test_dosockstunnel.FakeDroplet()

# 2017-08-18 00:11:23.016818
+import test_dosockstunnel

# 2017-08-18 00:11:24.325969
+hi = test_dosockstunnel.FakeDroplet()

# 2017-08-18 00:11:33.062658
+import test_dosockstunnel

# 2017-08-18 00:11:36.744778
+hi = test_dosockstunnel.FakeDroplet()

# 2017-08-18 00:11:54.978529
+import test_dosockstunnel

# 2017-08-18 00:11:55.945186
+hi = test_dosockstunnel.FakeDroplet()

# 2017-08-18 00:11:57.299402
+hi

# 2017-08-18 00:12:00.733710
+hi.networks

# 2017-08-18 00:12:20.697734
+hi.networks['v4'][0]['ip_address']

# 2017-08-18 01:23:26.632622
+from attaskcreator import main

# 2017-08-18 01:25:47.699780
+import os

# 2017-08-18 01:25:57.878405
+os.environt['SLACK_VER_TOKEN'] = 'foo'

# 2017-08-18 01:26:02.108543
+os.environ['SLACK_VER_TOKEN'] = 'foo'

# 2017-08-18 01:26:18.611813
+os.environ['SLACK_API_TOKEN'] = 'bar'

# 2017-08-18 01:26:43.004052
+os.environ['TEAM_ID'] = '12345'

# 2017-08-18 01:26:47.137805
+from attaskcreator import main

# 2017-08-18 01:28:16.748411
+USERLIST = {"members": [
+    {
+        "color": "ffffff",
+        "id": "U00000001",
+        "name": "jbiden",
+        "profile": {
+            "email": "jbiden@whitehouse.gov",
+            "first_name": "Joe",
+            "last_name": "Biden",
+            "real_name": "Joe Biden",
+            "real_name_normalized": "Joe Biden",
+            "team": "T00000001",
+            "title": ""
+        },
+        "real_name": "Joe Biden",
+        "team_id": "T00000001",
+        "tz": "America/New_York",
+        "tz_label": "Eastern Daylight Time",
+        "tz_offset": -14400,
+    },
+    {
+        "color": "000000",
+        "id": "U00000002",
+        "name": "bobama",
+        "profile": {
+            "email": "bobama@whitehouse.gov",
+            "first_name": "Barack",
+            "last_name": "Obama",
+            "real_name": "Barack Obama",
+            "real_name_normalized": "Barack Obama",
+            "team": "T00000001"
+        },
+        "real_name": "Barack Obama",
+        "team_id": "T00000001",
+        "tz": "America/New_York",
+        "tz_label": "Eastern Daylight Time",
+        "tz_offset": -14400,
+    },
+],
+}

# 2017-08-18 01:28:19.036501
+USERLIST

# 2017-08-18 01:28:36.289055
+from attaskcreator.main import findpeople

# 2017-08-18 01:28:47.895489
+os.environ['SLACK_VER_TOKEN'] = 'foo'

# 2017-08-18 01:28:51.716406
+import os

# 2017-08-18 01:28:52.949515
+os.environ['SLACK_VER_TOKEN'] = 'foo'

# 2017-08-18 01:29:00.084924
+os.environ['SLACK_API_TOKEN'] = 'bar'

# 2017-08-18 01:29:08.615523
+os.environ['TEAM_ID'] = '12345'

# 2017-08-18 01:29:11.415974
+from attaskcreator.main import findpeople

# 2017-08-18 01:29:47.521707
+people = findpeople(['bobama', 'jbiden'], USERLIST)

# 2017-08-18 01:30:15.057388
+people = findpeople('hey @bobama how is @jbiden', USERLIST)

# 2017-08-18 01:30:38.109668
+from attaskcreator.main import findpeople

# 2017-08-18 01:30:40.680465
+people = findpeople('hey @bobama how is @jbiden', USERLIST)

# 2017-08-21 22:55:11.884035
+from slackperson import SlackPerson

# 2017-08-21 22:55:18.284442
+from test_slackperson import USERLIST

# 2017-08-21 22:55:23.184038
+USERLIST

# 2017-08-21 22:55:40.390847
+SlackPerson('dtrump', USERLIST)

# 2017-08-21 22:56:03.361985
+from slackperson import SlackDataError

# 2017-08-21 22:56:40.555609
+try:
+    SlackPerson('dtrump', USERLIST)
+except SlackDataError:
+    print('error handled')

# 2017-08-21 22:57:27.052135
+try:
+    [SlackPerson(user, USERLIST) for user in ['bobama', 'dtrump', 'jbiden']]
+except SlackDataError:
+    print('error handled')

# 2017-08-21 22:57:41.465965
+try:
+    myobjects = [SlackPerson(user, USERLIST) for user in ['bobama', 'dtrump', 'jbiden']]
+except SlackDataError:
+    print('error handled')

# 2017-08-21 22:57:43.861881
+myobjects

# 2017-08-21 22:57:58.311425
+try:
+    myobjects = [SlackPerson(user, USERLIST) for user in ['bobama', 'dtrump', 'jbiden']]
+except SlackDataError:
+    pass

# 2017-08-21 22:58:00.900462
+myobjects

# 2017-08-21 22:58:32.113654
+myteam = []

# 2017-08-21 22:59:58.861437
+for user in ['bobama', 'dtrump', 'jbiden']:
+    try:
+        myteam.append(SlackPerson(user, USERLIST))
+    except SlackDataError:
+        pass

# 2017-08-21 23:00:01.726366
+myteam
# 2017-08-21 23:23:20.885126
+silent = True

# 2017-08-21 23:23:37.709851
+try:
+    raise Exception
+except:
+    if not silent:
+        raise

# 2017-08-21 23:23:42.255881
+silent = Flase

# 2017-08-21 23:23:46.066133
+silent = False

# 2017-08-21 23:23:47.873180
+try:
+    raise Exception
+except:
+    if not silent:
+        raise

# 2017-08-21 23:51:18.970127
+USERLIST = {"members": [
+    {
+        "color": "ffffff",
+        "id": "U00000001",
+        "name": "jbiden",
+        "profile": {
+            "email": "jbiden@whitehouse.gov",
+            "first_name": "Joe",
+            "last_name": "Biden",
+            "real_name": "Joe Biden",
+            "real_name_normalized": "Joe Biden",
+            "team": "T00000001",
+            "title": ""
+        },
+        "real_name": "Joe Biden",
+        "team_id": "T00000001",
+        "tz": "America/New_York",
+        "tz_label": "Eastern Daylight Time",
+        "tz_offset": -14400,
+    },
+    {
+        "color": "000000",
+        "id": "U00000002",
+        "name": "bobama",
+        "profile": {
+            "email": "bobama@whitehouse.gov",
+            "first_name": "Barack",
+            "last_name": "Obama",
+            "real_name": "Barack Obama",
+            "real_name_normalized": "Barack Obama",
+            "team": "T00000001"
+        },
+        "real_name": "Barack Obama",
+        "team_id": "T00000001",
+        "tz": "America/New_York",
+        "tz_label": "Eastern Daylight Time",
+        "tz_offset": -14400,
+    },
+],
+}

# 2017-08-21 23:51:23.757995
+import slackmentions

# 2017-08-21 23:51:49.150878
+slackmentions.findpeople('hey @jbiden', USERLIST)

# 2017-08-21 23:54:30.891974
+USERLIST = {"members": [
+    {
+        "color": "ffffff",
+        "id": "U00000001",
+        "name": "jbiden",
+        "profile": {
+            "email": "jbiden@whitehouse.gov",
+            "first_name": "Joe",
+            "last_name": "Biden",
+            "real_name": "Joe Biden",
+            "real_name_normalized": "Joe Biden",
+            "team": "T00000001",
+            "title": ""
+        },
+        "real_name": "Joe Biden",
+        "team_id": "T00000001",
+        "tz": "America/New_York",
+        "tz_label": "Eastern Daylight Time",
+        "tz_offset": -14400,
+    },
+    {
+        "color": "000000",
+        "id": "U00000002",
+        "name": "bobama",
+        "profile": {
+            "email": "bobama@whitehouse.gov",
+            "first_name": "Barack",
+            "last_name": "Obama",
+            "real_name": "Barack Obama",
+            "real_name_normalized": "Barack Obama",
+            "team": "T00000001"
+        },
+        "real_name": "Barack Obama",
+        "team_id": "T00000001",
+        "tz": "America/New_York",
+        "tz_label": "Eastern Daylight Time",
+        "tz_offset": -14400,
+    },
+],
+}

# 2017-08-21 23:54:35.255959
+import slackmentions

# 2017-08-21 23:55:01.757272
+slackmentions.findpeople('@bobama hi', USERLIST)

# 2017-08-21 23:55:08.136378
+slackmentions.findpeople('@bobama hi @jbiden', USERLIST)

# 2017-08-21 23:55:20.384546
+slackmentions.findpeople('@jbiden hi @bobama', USERLIST)

# 2017-08-21 23:56:41.240739
+import slackmentions

# 2017-08-21 23:56:42.668327
+slackmentions.findpeople('@jbiden hi @bobama', USERLIST)

# 2017-08-21 23:56:46.438674
+USERLIST = {"members": [
+    {
+        "color": "ffffff",
+        "id": "U00000001",
+        "name": "jbiden",
+        "profile": {
+            "email": "jbiden@whitehouse.gov",
+            "first_name": "Joe",
+            "last_name": "Biden",
+            "real_name": "Joe Biden",
+            "real_name_normalized": "Joe Biden",
+            "team": "T00000001",
+            "title": ""
+        },
+        "real_name": "Joe Biden",
+        "team_id": "T00000001",
+        "tz": "America/New_York",
+        "tz_label": "Eastern Daylight Time",
+        "tz_offset": -14400,
+    },
+    {
+        "color": "000000",
+        "id": "U00000002",
+        "name": "bobama",
+        "profile": {
+            "email": "bobama@whitehouse.gov",
+            "first_name": "Barack",
+            "last_name": "Obama",
+            "real_name": "Barack Obama",
+            "real_name_normalized": "Barack Obama",
+            "team": "T00000001"
+        },
+        "real_name": "Barack Obama",
+        "team_id": "T00000001",
+        "tz": "America/New_York",
+        "tz_label": "Eastern Daylight Time",
+        "tz_offset": -14400,
+    },
+],
+}

# 2017-08-21 23:57:03.486946
+import re

# 2017-08-21 23:57:52.241120
+usernames = re.findall('@([a-zA-A0-9._]*)', "hey @jbiden, what's up? - @bobama")

# 2017-08-21 23:57:53.789291
+usernames

# 2017-08-21 23:57:59.186614
+usernames.group()

# 2017-08-21 23:58:00.878961
+usernames

# 2017-08-22 12:37:12.213810
+import re

# 2017-08-22 12:37:35.614453
+text = 'hi, Can you please find this text?\ndh'

# 2017-08-22 12:39:19.203574
+truncate = re.compile(r'^(.+?){}'.format('\ndh'))

# 2017-08-22 12:39:41.105572
+text_trunc = truncate.search(text)

# 2017-08-22 12:39:44.463197
+text_trunc

# 2017-08-22 12:40:01.157976
+text_trunc.group(0)

# 2017-08-22 12:40:03.615452
+text_trunc.group(1)

# 2017-08-22 12:42:47.580737
+truncate.search('not in here')

# 2017-08-22 12:42:51.696355
+truncate.group()

# 2017-08-22 12:42:59.223105
+test = truncate.search('not in here')

# 2017-08-22 12:43:00.191730
+test

# 2017-08-22 12:43:02.424793
+test.group

# 2017-08-22 12:45:04.164691
+test.group(1)

# 2017-08-22 12:54:11.404097
+truncate = re.compile(r'(.*){}'.format('?'))

# 2017-08-22 12:54:26.838255
+search_text = truncate.search('Can you please return this?')

# 2017-08-22 12:54:29.278561
+search_text

# 2017-08-22 12:54:34.838025
+search_text.group(1)

# 2017-08-22 12:54:47.892829
+truncate = re.compile(r'^(.*){}'.format('?'))

# 2017-08-22 12:54:51.030055
+search_text = truncate.search('Can you please return this?')

# 2017-08-22 12:54:53.137331
+search_text.group(1)

# 2017-08-22 12:54:56.675847
+search_text.group(0)

# 2017-08-22 12:55:00.134212
+search_text.group(2)

# 2017-08-22 12:55:20.457711
+search_text = truncate.findall('Can you please return this?')

# 2017-08-22 12:55:24.337219
+search_text

# 2017-08-22 12:55:29.445306
+search_text.group(1)

# 2017-08-22 12:55:48.356652
+truncate = re.compile(r'^(.+?)({})'.format('?'))

# 2017-08-22 12:56:03.183793
+truncate = re.compile(r'^(.+?){}'.format(re.escape('?')))

# 2017-08-22 12:56:07.129225
+search_text = truncate.findall('Can you please return this?')

# 2017-08-22 12:56:10.153004
+search_text

# 2017-08-22 12:56:16.160217
+search_text.group(1)

# 2017-08-22 12:56:24.817271
+search_text = truncate.search('Can you please return this?')

# 2017-08-22 12:56:29.945590
+search_text.group(1)

# 2017-08-22 12:56:32.705908
+search_text.group(2)

# 2017-08-22 13:05:39.511371
+import re

# 2017-08-22 13:05:47.840028
+text = 'Can you please return this?'

# 2017-08-22 13:06:15.920422
+truncate = re.compile(r'^(.*){}'.format(re.escape('?')))

# 2017-08-22 13:06:37.213689
+search_text = truncate.search(search_text, re.DOTALL)

# 2017-08-22 13:06:46.045177
+search_text = truncate.search(text, re.DOTALL)

# 2017-08-22 13:06:48.857795
+search_text

# 2017-08-22 13:06:59.196650
+search_text = truncate.search(search_text)

# 2017-08-22 13:07:09.025156
+search_text = truncate.search(text)

# 2017-08-22 13:07:11.376875
+search_text

# 2017-08-22 13:07:17.925778
+search_text.group(1)

# 2017-08-22 13:07:30.402899
+truncate = re.compile(r'^(.*){}'.format(re.escape('?')), re.DOTALL)

# 2017-08-22 13:07:33.304885
+search_text = truncate.search(text)

# 2017-08-22 13:07:35.667132
+search_text.group(1)

# 2017-08-22 13:12:26.934763
+import configparser

# 2017-08-22 13:12:32.182282
+test = configparser.ConfigParser()

# 2017-08-22 13:12:37.595704
+test.read(testconfig.conf)

# 2017-08-22 13:12:43.120761
+test.read('testconfig.conf')

# 2017-08-22 13:12:49.194162
+test['parse']

# 2017-08-22 13:12:54.057673
+test['Parse']

# 2017-08-22 13:12:55.556711
+test

# 2017-08-22 13:13:05.666582
+test['Parse']['termination character']

# 2017-08-22 13:13:41.509666
+'{}'.format(test['Parse']['termination character'])

# 2017-08-22 13:13:52.307089
+print('{}'.format(test['Parse']['termination character']))

# 2017-08-22 13:14:27.402639
+test.read('testconfig.conf')

# 2017-08-22 13:14:40.841545
+test['Parse']['termination character']

# 2017-08-22 13:14:51.030069
+import re

# 2017-08-22 13:15:38.704452
+test_search = re.search('{}'.format(test['Parse']['termination character']), 'hi\ndh')

# 2017-08-22 13:15:40.773872
+test_search

# 2017-08-22 13:15:53.199500
+test_search = re.search('{}'.format(re.escape(test['Parse']['termination character'])), 'hi\ndh')

# 2017-08-22 13:15:57.022407
+test_search

# 2017-08-22 13:16:41.822464
+char = test['Parse']['termination character'].decode('string_escape')

# 2017-08-22 13:17:07.717100
+import ast

# 2017-08-22 13:17:26.851811
+ast.literal_eval(test['Parse']['termination character'])

# 2017-08-22 13:17:45.951054
+char = ast.literal_eval(test['Parse']['termination character'])

# 2017-08-22 13:17:47.683531
+char

# 2017-08-22 13:17:56.707710
+test_search = re.search('{}'.format(re.escape(char)), 'hi\ndh')

# 2017-08-22 13:17:58.895779
+test_search

# 2017-08-22 13:18:05.490750
+test_search.group()

# 2017-08-22 14:05:48.434674
+import re

# 2017-08-22 14:05:51.490606
+test = '\n'

# 2017-08-22 14:05:59.500016
+escape = re.escape(test)

# 2017-08-22 14:06:01.059308
+escape

# 2017-08-22 14:41:09.506448
+import attaskcreator

# 2017-08-22 14:41:56.966994
+with open('./tests/testeml', 'rb') as f:
+    testmsg = f.read()

# 2017-08-22 14:42:12.346884
+msg = attaskcreator.retrievemail.get_msg_text(testmsg)

# 2017-08-22 14:42:20.294448
+from attaskcreator import retrievemail

# 2017-08-22 14:42:31.740652
+msg = retrievemail.get_msg_text(testmsg)

# 2017-08-22 14:42:45.859679
+with open('./tests/testeml', 'r') as f:
+    testmsg = f.read()

# 2017-08-22 14:42:49.006148
+msg = retrievemail.get_msg_text(testmsg)

# 2017-08-22 14:43:12.805098
+import email

# 2017-08-22 14:43:43.182477
+with open('./tests/testeml', 'br') as f:
+    testmsg = email.message_from_bytes(f.read())

# 2017-08-22 14:43:47.124663
+msg = retrievemail.get_msg_text(testmsg)

# 2017-08-22 14:43:48.693012
+msg

# 2017-08-22 14:44:12.375035
+from attaskcreator import config

# 2017-08-22 14:44:22.144390
+settings = config.Settings()

# 2017-08-22 14:44:27.602015
+settings.setup_eml()

# 2017-08-22 14:45:12.860579
+mail = retrievemail.FetchMail(settings.eml_imap_server)

# 2017-08-22 14:45:32.340585
+messages = mail.fetch_unread_messages(settings.eml_username, settings.eml_pwd)

# 2017-08-22 14:45:35.296910
+messages

# 2017-08-22 14:45:50.522454
+data = retrievemail.read_msg_info(messages[0])

# 2017-08-22 14:46:14.633864
+import beautifulsoup

# 2017-08-22 14:46:32.667555
+from attaskcreator import config

# 2017-08-22 14:46:40.746703
+from attaskcreator import retrievemail

# 2017-08-22 14:46:45.578465
+settings = config.Settings()

# 2017-08-22 14:46:50.238232
+settings.setup_eml()

# 2017-08-22 14:46:53.773879
+messages = mail.fetch_unread_messages(settings.eml_username, settings.eml_pwd)

# 2017-08-22 14:46:58.787327
+mail = retrievemail.FetchMail(settings.eml_imap_server)

# 2017-08-22 14:47:00.924493
+messages = mail.fetch_unread_messages(settings.eml_username, settings.eml_pwd)

# 2017-08-22 14:47:20.399329
+mail = retrievemail.FetchMail(settings.eml_imap_server)

# 2017-08-22 14:47:23.184248
+messages = mail.fetch_unread_messages(settings.eml_username, settings.eml_pwd)

# 2017-08-22 14:47:41.422315
+data = retrievemail.read_msg_info(messages[0])

# 2017-08-22 14:47:44.347896
+data

# 2017-08-22 14:48:57.054133
+body_plain = retrievemail.get_msg_text(messages[0])

# 2017-08-22 14:49:01.337481
+body_plain

# 2017-08-22 14:49:07.026975
+import beautifulsoup

# 2017-08-22 14:49:08.406870
+import beautifulsoup4

# 2017-08-22 14:49:11.697078
+import bs4

# 2017-08-22 14:49:40.940677
+test = bs4.BeautifulSoup(body_plain)

# 2017-08-22 14:50:00.866567
+test = bs4.BeautifulSoup(body_plain, 'html.parser')

# 2017-08-22 14:50:02.151545
+test

# 2017-08-22 14:50:10.847883
+'\ndh' in test

# 2017-08-22 14:50:44.298755
+test.replace('\r', '')

# 2017-08-22 14:50:48.407191
+test

# 2017-08-22 14:50:58.264372
+test.__dict__

# 2017-08-22 14:51:35.337878
+tag = test.b

# 2017-08-22 14:51:36.160633
+tag

# 2017-08-22 14:51:48.450034
+tag['id']

# 2017-08-22 14:51:51.520561
+test

# 2017-08-22 14:52:04.769081
+test.get_text()

# 2017-08-22 14:52:22.625345
+thetext = test.get_text()

# 2017-08-22 14:52:32.973070
+cleantext = thetext.replace('\r', '')

# 2017-08-22 14:52:35.526384
+cleantext

# 2017-08-22 14:52:44.398178
+'\ndh' in cleantext

# 2017-08-28 23:36:24.033598
+from tinydb import TinyDB, Query

# 2017-08-28 23:36:34.085199
+db = TinyDB('db.json')

# 2017-08-28 23:36:47.248597
+db.insert({'type': 'apple', 'count': 7})

# 2017-08-28 23:37:04.294342
+db.insert({'type': 'peach', 'count': 3})

# 2017-08-28 23:37:08.795450
+db.all()

# 2017-08-28 23:37:33.880574
+for item in db:
+    print(item)

# 2017-08-28 23:37:41.584869
+Fruit = Query()

# 2017-08-28 23:37:51.962438
+db.search(Fruit.type == 'peach')

# 2017-08-28 23:38:08.467829
+db.search(Fruit.count > 5)

# 2017-08-28 23:38:26.952693
+db.update({'count': 10}, Fruit.type == 'apple')

# 2017-08-28 23:38:30.812075
+db.all()

# 2017-08-28 23:38:40.845829
+db.remove(Fruit.count < 5)

# 2017-08-28 23:38:46.414550
+db.purge()

# 2017-08-28 23:38:49.112768
+db.all()

# 2017-08-29 01:25:45.064138
+from lyskel import lynames

# 2017-08-29 01:25:48.136457
+exit

# 2017-08-29 01:26:32.938264
+from lyskel import lynames

# 2017-08-29 01:27:10.590090
+from tinydb import TinyDB, Query

# 2017-08-29 01:27:16.225064
+from lyskel import lynames

# 2017-08-29 01:27:42.099624
+db = TinyDB('/tmp/tmptestdb.json')

# 2017-08-29 01:27:49.964016
+table = db.table('instruments')

# 2017-08-29 01:27:52.058846
+table

# 2017-08-29 01:27:56.351085
+table.all()

# 2017-08-29 01:28:26.963609
+test = lynames.Instrument.load_from_db('violin', table, number=1)

# 2017-08-29 01:28:45.124184
+from tinydb import TinyDB, Query

# 2017-08-29 01:28:49.505995
+from lyskel import lynames

# 2017-08-29 01:28:54.917134
+db = TinyDB('/tmp/tmptestdb.json')

# 2017-08-29 01:28:57.418616
+table = db.table('instruments')

# 2017-08-29 01:29:04.198492
+test = lynames.Instrument.load_from_db('violin', table, number=1)

# 2017-08-29 01:29:05.735503
+test

# 2017-08-29 01:29:12.135041
+test.__dict__

# 2017-08-29 01:29:50.010820
+test.asdict()

# 2017-08-29 01:29:57.772309
+import attrs

# 2017-08-29 01:30:08.899198
+import attr

# 2017-08-29 01:30:15.362883
+attr.asdict(test)

# 2017-08-29 01:30:57.097787
+test.__dict__

# 2017-08-29 01:35:04.515281
+from lyskel import lynames

# 2017-08-29 01:35:11.644627
+from tinydb import TinyDB, Query

# 2017-08-29 01:35:22.365908
+test = lynames.Instrument.load_from_db('violin', table, number=1)

# 2017-08-29 01:35:29.987094
+db = TinyDB('/tmp/tmptestdb.json')

# 2017-08-29 01:35:35.569427
+table = db.table('instruments')

# 2017-08-29 01:35:37.741308
+test = lynames.Instrument.load_from_db('violin', table, number=1)

# 2017-08-29 01:35:39.309841
+tet

# 2017-08-29 01:35:40.470325
+test

# 2017-08-29 01:35:52.600221
+import attr

# 2017-08-29 01:35:58.451917
+attr.asdict(test)

# 2017-08-29 01:36:14.064553
+test.__dict__

# 2017-08-29 01:38:22.200586
+from lyskel import lynames

# 2017-08-29 01:38:26.833838
+from tinydb import TinyDB, Query

# 2017-08-29 01:38:32.742316
+db = TinyDB('/tmp/tmptestdb.json')

# 2017-08-29 01:38:37.078679
+table = db.table('instruments')

# 2017-08-29 01:38:41.957384
+test = lynames.Instrument.load_from_db('violin', table, number=1)

# 2017-08-29 01:38:44.392674
+test

# 2017-08-29 01:38:54.852378
+test.__dict__

# 2017-08-29 01:39:01.371901
+attr.asdict(test)

# 2017-08-29 01:39:04.984107
+import attr

# 2017-08-29 01:39:05.935408
+attr.asdict(test)

# 2017-08-29 01:39:43.639460
+from lyskel.lynames import Instrument

# 2017-08-29 01:40:06.497495
+Instrument('violin', abbr='vln', clef='treble')

# 2017-08-29 01:40:34.315755
+from lyskel.lynames import Instrument

# 2017-08-29 01:40:35.804304
+Instrument('violin', abbr='vln', clef='treble')

# 2017-08-29 01:40:44.324588
+_

# 2017-08-29 01:41:35.637515
+test = Instrument('violin')

# 2017-08-29 01:41:37.143055
+test

# 2017-08-29 01:45:53.274944
+from lyskel.lynames import Instrument

# 2017-08-29 01:45:58.156511
+Instrument('violin', abbr='vln', clef='treble')

# 2017-08-29 01:48:01.015657
+exit

# 2017-08-29 01:48:06.537222
+from lyskel.lynames import Instrument

# 2017-08-29 01:48:08.446604
+Instrument('violin', abbr='vln', clef='treble')

# 2017-08-29 01:48:19.928998
+Instrument('violin', abbr='vln', clef='treble', number=1)

# 2017-08-29 01:48:26.494173
+import attr

# 2017-08-29 01:48:33.799160
+attr.asdict(_)

# 2017-08-29 01:52:38.410401
+from tinydb import TinyDB, Query

# 2017-08-29 01:52:42.066292
+from lyskel.lynames import Instrument

# 2017-08-29 01:52:50.477378
+test = Instrument.load_from_db('violin', table, number=1)

# 2017-08-29 01:53:00.428880
+db = TinyDB('/tmp/tmptestdb.json')

# 2017-08-29 01:53:10.617998
+table = db.table('instruments')

# 2017-08-29 01:53:12.471574
+test = Instrument.load_from_db('violin', table, number=1)

# 2017-08-29 01:53:13.741445
+test

# 2017-08-29 01:53:31.025486
+import attr

# 2017-08-29 01:53:39.938140
+attr.asdict(test)

# 2017-08-29 01:56:14.068419
+viola = Instrument(name='viola', abbr='Vla.', clef='alto', midi='viola')

# 2017-08-29 01:56:15.752595
+viola

# 2017-08-29 01:56:29.949363
+attr.asdict(viola)

# 2017-08-29 01:57:59.773776
+attr.asdict(viola, filter=attr.filters.exclude(attr.fields(Instrument)._roman, attr.fields(Instrument).number, attr.fields(Instrument)._numword))

# 2017-08-29 01:58:32.385144
+table.insert(_)

# 2017-08-29 01:58:35.635465
+table.all()

# 2017-08-29 12:45:17.215035
+from lynames import LyName

# 2017-08-29 12:45:22.843981
+from lyskel.lynames import LyName

# 2017-08-29 12:45:30.045556
+test = LyName('test')

# 2017-08-29 12:45:31.133865
+test

# 2017-08-29 12:45:35.859895
+test.number = 1

# 2017-08-29 12:45:36.881435
+test

# 2017-08-29 12:45:43.804641
+test.file_name(1)

# 2017-08-29 12:45:58.488345
+test._movement(1, form='num')

# 2017-08-29 12:46:04.961164
+test._movement(1, form='ord')

# 2017-08-29 12:46:36.301672
+from lyskel.lynames import Instrument

# 2017-08-29 12:46:54.875915
+test = Instrument.numbered_name('test', number=1)

# 2017-08-29 12:46:55.998315
+test

# 2017-08-29 12:47:03.183886
+test.file_name

# 2017-08-29 12:47:09.592290
+test.file_name()

# 2017-08-29 12:47:12.975856
+test.file_name(1)

# 2017-08-29 12:47:21.535750
+test.var_name(1)

# 2017-08-29 12:47:35.515822
+test.number

# 2017-08-29 13:01:12.368441
+from lyskel.lynames import Instrument

# 2017-08-29 13:01:22.993063
+from tinydb import TinyDB, Query

# 2017-08-29 13:02:40.030662
+violoncello = Instrument.numbered_name('violoncello', number=2, abbr='Vc.', clef='bass', midi='cello')

# 2017-08-29 13:03:03.484709
+db = TinyDB('/tmp/tmptestdb.json')

# 2017-08-29 13:03:05.598279
+db.all()

# 2017-08-29 13:03:15.624338
+db.table('instrument').all()

# 2017-08-29 13:03:19.649774
+db.table('instruments').all()

# 2017-08-29 13:03:30.913968
+violoncello.add_to_db(db)

# 2017-08-29 13:03:33.728282
+db.table('instruments').all()

# 2017-08-29 13:27:13.092980
+test = None

# 2017-08-29 13:27:16.529927
+test + 'hi'

# 2017-08-29 15:17:30.168101
+from tinydb import TinyDB, Query

# 2017-08-29 15:17:35.007186
+Ins = Query()

# 2017-08-29 15:17:40.234227
+db = TinyDB('/tmp/tmptestdb.json')

# 2017-08-29 15:17:55.418316
+instable = db.table('instruments')

# 2017-08-29 15:18:00.721644
+instable.get('flute')

# 2017-08-29 15:18:10.399493
+instable.get(Ins.name == 'flute')

# 2017-08-29 15:18:13.447805
+_

# 2017-08-29 15:18:25.449621
+flute = instable.get(Ins.name == 'flute')

# 2017-08-29 15:18:26.904883
+flute

# 2017-08-29 15:18:31.034372
+print(flute)

# 2017-08-29 15:19:10.980990
+db

# 2017-08-29 15:19:17.687852
+db.__dict__

# 2017-08-29 19:42:59.119373
+from tinydb import TinyDB

# 2017-08-29 19:43:16.069683
+TinyDB('/tmp/test/path.json')

# 2017-08-29 19:45:16.922920
+import os

# 2017-08-29 19:45:58.781142
+os.path.dirname('/tmp/test/path')

# 2017-08-29 19:47:00.039064
+TinyDB('/tmp/test.json')

# 2017-08-29 19:47:05.187095
+test = _

# 2017-08-29 19:47:06.017034
+test

# 2017-08-29 19:47:11.580186
+test.table('test')

# 2017-08-29 19:47:18.140554
+table = _

# 2017-08-29 19:47:31.509185
+table.insert({'name': 'myobj'})

# 2017-08-29 19:47:34.913309
+table.all()

# 2017-08-29 19:47:45.078216
+from tinydb import TinyDB

# 2017-08-29 19:48:09.246018
+test = TinyDB('/etc/test.json')

# 2017-08-29 19:58:33.161111
+from tinydb import TinyDB

# 2017-08-29 19:58:41.375921
+test = TinyDB('temptestdb.json')

# 2017-08-29 19:58:42.346155
+test

# 2017-08-29 19:58:44.561410
+test.all()

# 2017-08-29 19:58:52.553348
+test.table('instruments').all()

# 2017-08-29 19:59:14.237470
+json.dumps(_, indent=4)

# 2017-08-29 19:59:17.456179
+import json

# 2017-08-29 19:59:18.441547
+json.dumps(_, indent=4)

# 2017-08-29 19:59:23.487676
+print(_)

# 2017-08-29 20:01:11.753445
+test.tables()

# 2017-08-29 20:07:37.725425
+from tinydb import TinyDB

# 2017-08-29 20:07:45.893893
+test = TinyDB('tmptestdb.json')

# 2017-08-29 20:07:46.846206
+test

# 2017-08-29 20:07:49.757628
+test.tables()

# 2017-08-29 20:08:03.258885
+ins = test.table('instruments')

# 2017-08-29 20:08:06.075397
+ins

# 2017-08-29 20:08:08.497218
+ins.all()

# 2017-08-29 20:18:25.950569
+test = {'item1', 'item2'}

# 2017-08-29 20:18:30.119609
+list(test)

# 2017-08-29 20:42:44.450746
+from pathlib import Path

# 2017-08-29 20:43:15.868270
+mydir = Paht('myfiles', 'docs')

# 2017-08-29 20:43:20.190597
+mydir = Path('myfiles', 'docs')

# 2017-08-29 20:43:21.515319
+mydir

# 2017-08-29 20:43:29.758955
+Path.root

# 2017-08-29 20:51:51.062031
+import os

# 2017-08-29 20:51:54.759389
+os.path(__file__)

# 2017-08-29 20:52:05.632761
+os.path(os.getcwd)

# 2017-08-29 20:52:10.169076
+os.getcwd()

# 2017-08-29 20:52:18.438454
+base = _

# 2017-08-29 20:52:19.210319
+base

# 2017-08-29 20:52:25.486987
+os.dirname(base)

# 2017-08-29 20:52:30.374263
+os.path.dirname(base)

# 2017-08-29 20:52:55.105470
+file = os.path.join(base, 'test_db_interface.py')

# 2017-08-29 20:52:56.407595
+file

# 2017-08-29 20:53:02.266856
+os.path.dirname(file)

# 2017-08-29 20:53:08.618118
+os.path.dirname(_)

# 2017-08-29 20:53:55.722649
+from pathlib import PATH

# 2017-08-29 20:53:57.967483
+from pathlib import Path

# 2017-08-29 20:54:08.767434
+path = Path(file)

# 2017-08-29 20:54:09.729037
+path

# 2017-08-29 20:54:15.129639
+path.parents[0]

# 2017-08-29 20:54:28.907648
+str(path)

# 2017-08-29 20:54:38.109378
+path.parents[2]

# 2017-08-29 20:54:41.660713
+path.parents[1]

# 2017-08-29 20:58:12.085649
+from pathlib import Path

# 2017-08-29 20:58:24.884967
+test = Path('/tmp/hi')

# 2017-08-29 20:58:25.937985
+test

# 2017-08-29 20:58:30.588045
+import os

# 2017-08-29 20:58:36.614784
+os.makedirs(test)

# 2017-08-29 20:58:46.944796
+os.listdir('/tmp')

# 2017-08-29 21:00:20.992184
+from pathlib import Path

# 2017-08-29 21:00:25.087542
+Path('~')

# 2017-08-29 21:00:26.750037
+_

# 2017-08-29 21:01:53.062798
+from tinydb import TinyDB

# 2017-08-29 21:01:57.432592
+from pathlib import Path

# 2017-08-29 21:02:06.928307
+test = Path('/tmp/test/dir.json')

# 2017-08-29 21:02:11.764683
+TinyDB(test)

# 2017-08-29 21:02:50.987053
+test = Path('../lyskel/tmptestdb.json')

# 2017-08-29 21:02:52.209386
+test

# 2017-08-29 21:03:00.411714
+TinyDB(test)

# 2017-08-29 21:03:05.912739
+_.tables()

# 2017-08-29 21:09:25.009093
+from pathlib import Path

# 2017-08-29 21:09:29.047261
+test = '/tmp'

# 2017-08-29 21:09:35.150366
+testpath = Path(test)

# 2017-08-29 21:09:36.748974
+testpath

# 2017-08-29 21:09:39.808458
+Path(testpath)

# 2017-08-29 21:09:42.973493
+_

# 2017-08-29 21:19:17.600326
+from tinydb import TinyDB

# 2017-08-29 21:19:26.710571
+test = TinyDB('tmptestdb.json')

# 2017-08-29 21:19:30.810792
+test.tables()

# 2017-08-29 21:19:39.807321
+ins = test.table('instruments')

# 2017-08-29 21:19:53.786409
+for item in ins.all():
+    print(item['name'])

# 2017-08-29 21:20:08.423330
+test = TinyDB('temptestdb.json')

# 2017-08-29 21:21:04.358170
+ins = test.table('instruments')

# 2017-08-29 21:21:07.168657
+for item in ins.all():
+    print(item['name'])

# 2017-08-29 21:26:07.397015
+def test(hi=1):
+    pass

# 2017-08-29 21:26:12.980666
+test(lo=2)

# 2017-08-30 02:48:59.299327
+from tinydb import TinyDB

# 2017-08-30 02:49:04.088522
+TinyDB()

# 2017-08-30 02:56:28.434946
+from tinydb import TinyDB

# 2017-08-30 02:56:39.699793
+test = TinyDB('test.json')

# 2017-08-30 03:03:18.943138
+from tinydb import TinyDB

# 2017-08-30 03:03:28.063991
+from pathlib import Path

# 2017-08-30 03:03:54.856583
+Path('lyskel', 'default_db.json')

# 2017-08-30 03:04:03.454409
+db = TinyDB(_)

# 2017-08-30 03:04:04.486043
+db

# 2017-08-30 03:04:07.838228
+db.all()

# 2017-08-30 03:04:10.374521
+db.tables()

# 2017-08-30 03:04:23.525692
+ins = db.table('instruments')

# 2017-08-30 03:04:29.877697
+Search = Query()

# 2017-08-30 03:04:36.553564
+from tinydb import Query

# 2017-08-30 03:04:37.913327
+Search = Query()

# 2017-08-30 03:04:56.270253
+items = table.search('vio' in Search['name'])

# 2017-08-30 03:05:02.528128
+items = ins.search('vio' in Search['name'])

# 2017-08-30 03:05:30.046935
+items = ins.search(Search['name'] == 'vio')

# 2017-08-30 03:05:32.549204
+items

# 2017-08-30 03:06:57.080338
+testfunc = lambda s: 'vio' in s

# 2017-08-30 03:07:17.081514
+ins.search(Search['name'].test(testfunc))

# 2017-08-30 03:19:12.291006
+from tinydb import Query

# 2017-08-30 03:19:18.894042
+from pathlib import Path

# 2017-08-30 03:19:25.586846
+from tinydb import TinyDB

# 2017-08-30 03:19:32.651852
+Path('lyskel', 'default_db.json')

# 2017-08-30 03:19:41.906272
+db = TinyDB(_)

# 2017-08-30 03:19:51.536500
+tab = db.table('instruments')

# 2017-08-30 03:19:53.641504
+db.all()

# 2017-08-30 03:19:57.141310
+tab.all()

# 2017-08-30 17:48:09.667258
+assert {1, 2, 3} in {1, 2, 3, 4, 5}

# 2017-08-30 17:48:28.236119
+assert {1, 2, 3}.issubset({1, 2, 3, 4, 5})

# 2017-08-30 23:23:09.913003
+from tinydb import TinyDB

# 2017-08-30 23:23:24.289731
+db = TinyDB('lyskel/default_db.json')

# 2017-08-30 23:23:25.381828
+db

# 2017-08-30 23:23:29.796027
+db.__dict__

# 2017-08-30 23:23:41.106237
+db.tables()

# 2017-08-30 23:23:49.285927
+ins = db.table('instruments')

# 2017-08-30 23:23:50.498855
+ins

# 2017-08-30 23:23:54.116120
+ins.__dict__

# 2017-08-30 23:39:55.423789
+from tinydb import TinyDB

# 2017-08-30 23:43:01.536430
+from pathlib import Path

# 2017-08-30 23:43:16.570472
+list = [Path('.')]

# 2017-08-30 23:43:22.270420
+Path('.') in list

# 2017-08-30 23:48:11.000952
+count = 5

# 2017-08-30 23:48:48.173202
+for i in range(1, (count + 1)):
+    print(i)
+

# 2017-08-30 23:55:40.930829
+from lyskel import lynames

# 2017-08-30 23:57:19.199255
+quartet = lynames.Ensemble('String Quartet')

# 2017-08-30 23:57:21.587843
+quartet

# 2017-08-30 23:58:26.333220
+from lyskel import lynames

# 2017-08-30 23:58:32.655727
+from tinydb import TinyDB

# 2017-08-30 23:58:38.146972
+import shutil

# 2017-08-30 23:59:06.010672
+shutil.copy2('lyskel/default_db.json', 'lyskel/default_db.json.new')

# 2017-08-30 23:59:19.015248
+db = TinyDB('lyskel/default_db.json.new')

# 2017-08-30 23:59:19.913812
+db

# 2017-08-30 23:59:22.683083
+db.tables()

# 2017-08-30 23:59:50.200861
+sting_quartet = Ensemble('String Quartet')

# 2017-08-30 23:59:57.340576
+sting_quartet = lynames.Ensemble('String Quartet')

# 2017-08-31 00:00:01.794007
+string_quaret

# 2017-08-31 00:00:04.382750
+string_quartet

# 2017-08-31 00:00:11.493062
+string_quartet = lynames.Ensemble('String Quartet')

# 2017-08-31 00:00:13.559772
+string_quartet

# 2017-08-31 00:00:56.736106
+string_quartet.add_instrument('violin', 1)

# 2017-08-31 00:05:10.664385
+from lyskel import lynames

# 2017-08-31 00:05:15.062288
+from tinydb import TinyDB

# 2017-08-31 00:05:20.050382
+db = TinyDB('lyskel/default_db.json.new')

# 2017-08-31 00:05:26.488307
+sting_quartet = lynames.Ensemble('String Quartet')

# 2017-08-31 00:05:38.189672
+string_quartet = sting_quartet

# 2017-08-31 00:05:41.831483
+string_quartet

# 2017-08-31 00:05:48.497504
+sting_quartet

# 2017-08-31 00:05:59.621905
+string_quartet.add_instrument('violin', 1)

# 2017-08-31 00:06:22.366488
+string_quartet.add_instrument(name='violin', db=db, number=1)

# 2017-08-31 00:06:29.196212
+string_quartet.add_instrument(ins_name='violin', db=db, number=1)

# 2017-08-31 00:06:56.697777
+from lyskel import lynames

# 2017-08-31 00:06:59.516756
+from tinydb import TinyDB

# 2017-08-31 00:07:12.920304
+string_quartet = lynames.Ensemble('String Quartet')

# 2017-08-31 00:08:11.366028
+string_quarete.add_instrument(ins_name='violin', db=db, number=1)

# 2017-08-31 00:08:16.618433
+string_quartet.add_instrument(ins_name='violin', db=db, number=1)

# 2017-08-31 00:08:24.939584
+db = TinyDB('lyskel/default_db.json.new')

# 2017-08-31 00:08:26.413323
+string_quartet.add_instrument(ins_name='violin', db=db, number=1)

# 2017-08-31 00:08:30.866052
+string_quartet

# 2017-08-31 00:08:39.019933
+string_quartet.add_instrument(ins_name='violin', db=db, number=2)

# 2017-08-31 00:08:45.429441
+string_quartet.add_instrument(ins_name='viola', db=db)

# 2017-08-31 00:08:51.247968
+string_quartet.add_instrument(ins_name='violoncello', db=db)

# 2017-08-31 00:09:00.002885
+string_quartet.add_to_db(db)

# 2017-08-31 00:09:05.634447
+db.tables()

# 2017-08-31 00:09:13.936244
+ens = db.table('ensembles')

# 2017-08-31 00:09:15.186885
+ens

# 2017-08-31 00:09:18.012898
+ens.all()

# 2017-08-31 00:09:34.520971
+from lyskel import lynames

# 2017-08-31 00:09:39.448538
+from tinydb import TinyDB

# 2017-08-31 00:09:44.568865
+db = TinyDB('lyskel/default_db.json.new')

# 2017-08-31 00:11:04.098880
+string_quartet = lynames.Ensemble.load_from_db('string_quartet')

# 2017-08-31 00:11:10.972946
+string_quartet = lynames.Ensemble.load_from_db('string_quartet', db=db)

# 2017-08-31 00:11:29.737130
+string_quartet = lynames.Ensemble.load_from_db(name='string_quartet', db=db)

# 2017-08-31 00:12:14.284939
+from lyskel import lynames

# 2017-08-31 00:12:20.656825
+from tinydb import TinyDB

# 2017-08-31 00:12:26.150911
+db = TinyDB('lyskel/default_db.json.new')

# 2017-08-31 00:12:39.674665
+string_quartet = lynames.Ensemble.load_from_db(name='String Quartet', db=db)

# 2017-08-31 00:12:43.004394
+string_quartet

# 2017-08-31 00:13:45.201826
+for ins in string_quartet.instruments:
+    print('{instrument} uses the {clef} clef'.format(instrument=ins.name, clef=ins.clef))

# 2017-08-31 00:14:06.314198
+for ins in string_quartet.instruments:
+    print('{instrument} {num} uses the {clef} clef'.format(instrument=ins.name, num=instrument.number, clef=ins.clef))

# 2017-08-31 00:14:17.978387
+for ins in string_quartet.instruments:
+    print('{instrument} {num} uses the {clef} clef'.format(instrument=ins.name, num=ins.number, clef=ins.clef))

# 2017-08-31 00:14:44.270789
+for ins in string_quartet.instruments:
+    print(ins.part_name)

# 2017-08-31 00:14:51.884176
+for ins in string_quartet.instruments:
+    print(ins.part_name())

# 2017-08-31 00:14:58.528145
+for ins in string_quartet.instruments:
+    print(ins.file_name())

# 2017-08-31 00:15:07.620331
+for ins in string_quartet.instruments:
+    print(ins.file_name(), 1)

# 2017-08-31 00:15:14.274573
+for ins in string_quartet.instruments:
+    print(ins.file_name(1))

# 2017-08-31 00:23:51.316978
+from tinydb import TinyDB

# 2017-08-31 00:23:56.536367
+from lyskel import lynames

# 2017-08-31 00:24:11.971233
+from shutil import copy2

# 2017-08-31 00:24:22.446677
+copy2('default_db.json', 'default_db.json.new')

# 2017-08-31 00:24:31.249319
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:24:32.192386
+db

# 2017-08-31 00:24:35.370080
+db.tables()

# 2017-08-31 00:24:54.204360
+string_quartet = lynames.Ensemble('string_quartet')

# 2017-08-31 00:28:38.246252
+from tinydb import TinyDB

# 2017-08-31 00:28:52.378200
+from lynames import Ensemble, Instrument

# 2017-08-31 00:28:58.129396
+from .lynames import Ensemble, Instrument

# 2017-08-31 00:29:10.793334
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:29:23.606673
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:31:39.377505
+string_quartet = Ensemble.load_from_db('stringQuartet', db)

# 2017-08-31 00:31:52.732723
+string_quartet = Ensemble.load_from_db('string_quartet', db)

# 2017-08-31 00:32:53.695860
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:32:59.958649
+from tinydb import TinyDB

# 2017-08-31 00:33:20.891607
+string_quartet = Ensemble('String Quartet')

# 2017-08-31 00:33:49.412672
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:33:53.333354
+db.tables()

# 2017-08-31 00:34:02.575817
+ens = db.table('ensembles')

# 2017-08-31 00:34:05.184545
+ens.all()

# 2017-08-31 00:34:18.014519
+string_quartet = Ensemble('string_quartet')

# 2017-08-31 00:34:29.383099
+string_quartet.add_instrument('violin', db=db, number=1)

# 2017-08-31 00:34:32.534585
+string_quartet.add_instrument('violin', db=db, number=2)

# 2017-08-31 00:34:38.545897
+string_quartet.add_instrument('viola', db=db)

# 2017-08-31 00:34:44.578035
+string_quartet.add_instrument('violoncello', db=db)

# 2017-08-31 00:34:51.069436
+string_quartet.instruments()

# 2017-08-31 00:34:52.717905
+string_quartet.instruments

# 2017-08-31 00:35:23.653121
+ins = db.table('instruments')

# 2017-08-31 00:35:25.820605
+ins

# 2017-08-31 00:35:27.874189
+ins.all()

# 2017-08-31 00:38:27.773327
+from tinydb import TinyDB

# 2017-08-31 00:38:32.841795
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:38:37.136106
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:38:41.567613
+string_quartet = Ensemble('string_quartet')

# 2017-08-31 00:38:47.331146
+string_quartet.add_instrument('violin', db=db, number=1)

# 2017-08-31 00:38:52.142687
+string_quartet.add_instrument('violin', db=db, number=2)

# 2017-08-31 00:38:58.265155
+string_quartet.instruments

# 2017-08-31 00:39:24.219322
+from tinydb import TinyDB

# 2017-08-31 00:39:33.741255
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:39:41.734755
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:39:52.709358
+string_quartet = Ensemble('string_quartet')

# 2017-08-31 00:40:07.193164
+string_quartet.add_instrument('violin', db=db, number=1)

# 2017-08-31 00:40:29.528963
+from tinydb import TinyDB

# 2017-08-31 00:40:37.217867
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:40:45.184335
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:40:56.846623
+string_quartet = Ensemble('string_quartet')

# 2017-08-31 00:41:12.302403
+string_quartet.add_instrument('violin', db=db, number=1)

# 2017-08-31 00:41:18.368428
+string_quartet.instruments

# 2017-08-31 00:42:05.393798
+from tinydb import TinyDB

# 2017-08-31 00:42:16.685565
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:42:23.058763
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:42:33.874386
+string_quartet = Ensemble('string_quartet')

# 2017-08-31 00:42:37.139797
+string_quartet.add_instrument('violin', db=db, number=1)

# 2017-08-31 00:42:42.515823
+string_quartet.instruments

# 2017-08-31 00:42:45.890216
+string_quartet.add_instrument('violin', db=db, number=2)

# 2017-08-31 00:42:54.245418
+string_quartet.add_instrument('viola', db=db)

# 2017-08-31 00:42:59.483617
+string_quartet.add_instrument('violoncello', db=db)

# 2017-08-31 00:43:03.701170
+string_quartet.instruments

# 2017-08-31 00:43:16.852351
+string_quartet.add_to_db(db)

# 2017-08-31 00:43:24.832522
+db.table('ensembles').all()

# 2017-08-31 00:43:54.829935
+string_quartet2 = Ensemble.load_from_db(name='string quartet', db=db)

# 2017-08-31 00:43:58.246739
+string_quartet2

# 2017-08-31 00:45:04.752323
+piano_trio = Ensemble('Piano Trio')

# 2017-08-31 00:46:13.451323
+piano_trio.add_instrument('violin', db=db)

# 2017-08-31 00:46:17.428372
+piano_trio.instruments

# 2017-08-31 00:46:52.574522
+string_quartet.instruments

# 2017-08-31 00:47:34.502794
+assert piano_trio is string_quartet

# 2017-08-31 00:47:44.316658
+assert piano_trio == string_quartet

# 2017-08-31 00:47:53.703430
+assert piano_trio.instruments == string_quartet.instruments

# 2017-08-31 00:49:00.038218
+piano_trio

# 2017-08-31 00:49:13.174615
+piano_trio = Ensemble()

# 2017-08-31 00:49:25.205345
+piano_trio = Ensemble('piano trio')

# 2017-08-31 00:49:28.715443
+piano_trio

# 2017-08-31 00:50:05.430125
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:50:27.705090
+from tinydb import TinyDB

# 2017-08-31 00:50:33.234724
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:50:43.987819
+violin = Instrument.load_from_db('violin', db, number=1)

# 2017-08-31 00:50:45.236636
+violin

# 2017-08-31 00:51:06.457676
+violin2 = Instrument.load_from_db('violin', db)

# 2017-08-31 00:51:08.046881
+violin2

# 2017-08-31 00:51:19.771892
+violin3 = Instrument('violin')

# 2017-08-31 00:51:22.085430
+violin2

# 2017-08-31 00:51:23.887726
+violin3

# 2017-08-31 00:51:43.219079
+piano = Instrument.numbered_name('piano', 1)

# 2017-08-31 00:51:48.237868
+piano._roman

# 2017-08-31 00:51:59.475856
+clarinet = Instrument('clarinet')

# 2017-08-31 00:52:02.710052
+clarinet._roman

# 2017-08-31 00:53:11.626937
+string_quartet = Ensemble.load_from_db('string quartet', db)

# 2017-08-31 00:53:14.516647
+string_quartet

# 2017-08-31 00:53:26.051923
+piano_trio = Ensemble('piano trio')

# 2017-08-31 00:53:29.920922
+piano_trio

# 2017-08-31 00:56:08.936318
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:56:13.191363
+from tinydb import TinyDB

# 2017-08-31 00:56:17.162051
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:56:20.764667
+string_quartet = Ensemble.load_from_db('string quartet', db)

# 2017-08-31 00:56:33.403309
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:56:37.400318
+string_quartet = Ensemble.load_from_db('string quartet', db)

# 2017-08-31 00:57:06.354917
+from lyskel.lynames import Ensemble, Instrument

# 2017-08-31 00:57:08.799511
+from tinydb import TinyDB

# 2017-08-31 00:57:11.386266
+db = TinyDB('default_db.json.new')

# 2017-08-31 00:57:13.605312
+string_quartet = Ensemble.load_from_db('string quartet', db)

# 2017-08-31 00:57:16.813925
+string_quartet

# 2017-08-31 00:57:27.873404
+piano_trio = Ensemble('piano trio')

# 2017-08-31 00:57:30.894377
+piano_trio

# 2017-08-31 00:58:20.388973
+piano_trio.add_instrument('piano', abbr='Pno.', clef=('treble', 'bass'), keyboard=True, midi='grand piano', family='keyboards')

# 2017-08-31 00:58:26.129996
+piano_trio.instruments

# 2017-08-31 00:58:31.321774
+string_quartet.instruments

# 2017-08-31 00:58:47.864797
+piano_trio.add_instrument('violin', db=db)

# 2017-08-31 00:58:56.817464
+piano_trio.add_instrument('violoncello', db=db)

# 2017-08-31 00:59:00.700049
+piano_trio

# 2017-08-31 00:59:06.587776
+piano_trio.add_to_db(db)

# 2017-08-31 00:59:19.968547
+test = Ensemble.load_from_db('piano trio', db)

# 2017-08-31 00:59:21.452532
+test

# 2017-08-31 00:59:25.354278
+test.instruments

# 2017-08-31 00:59:38.518264
+db.table('instruments').all()

# 2017-08-31 01:02:14.053573
+from tinydb import TinyDB

# 2017-08-31 01:02:21.405657
+db = TinyDB('default_db.json.new')

# 2017-08-31 01:02:23.656778
+db.tables()

# 2017-08-31 01:02:30.755395
+db.table('ensembles').all()

# 2017-08-31 01:02:45.100036
+from lyskel.lynames import Ensemble

# 2017-08-31 01:02:59.669516
+test = Ensemble.load_from_db('piano trio', db)

# 2017-08-31 01:03:00.788170
+test

# 2017-08-31 03:16:30.816311
+raise KeyError()

# 2017-08-31 03:16:37.086729
+raise KeyError('hi')

# 2017-08-31 03:17:27.522148
+try:
+    raise KeyError('hi')
+except KeyError as err:
+    print(err.__dict__)

# 2017-08-31 03:17:35.921359
+try:
+    raise KeyError('hi')
+except KeyError as err:
+    print(err)

# 2017-08-31 03:18:01.341846
+pytest

# 2017-08-31 21:41:55.809628
+di = { {'name': 'flute', 'number': None}, {'name': 'oboe', 'number': None}}

# 2017-08-31 21:42:01.518077
+di = {{'name': 'flute', 'number': None}, {'name': 'oboe', 'number': None}}

# 2017-09-01 00:34:36.976074
+import requests

# 2017-09-01 00:34:41.452457
+from bs4 import BeautifulSoup

# 2017-09-01 00:35:13.255093
+page = requests.get('http://www.mutopiaproject.org/contribute.html')

# 2017-09-01 00:35:28.297186
+page

# 2017-09-01 00:35:37.120048
+page.__dict__

# 2017-09-01 00:35:50.362017
+parsed = BeautifulSoup(page, 'html.parser')

# 2017-09-01 00:36:05.160059
+parsed = BeautifulSoup(page.content, 'html.parser')

# 2017-09-01 00:36:07.124585
+parsed

# 2017-09-01 00:37:04.617429
+table = parsed.find('table', attrs={'class': 'table-bordered table-striped'})

# 2017-09-01 00:37:14.791921
+table

# 2017-09-01 00:38:47.608268
+parsed.children

# 2017-09-01 00:38:49.811690
+parsed.children()

# 2017-09-01 00:39:24.237533
+parsed.find('mutopiacomposer')

# 2017-09-01 00:39:26.566419
+_

# 2017-09-01 00:39:39.047364
+parsed.find('table')

# 2017-09-01 00:40:05.861413
+_.contents()

# 2017-09-01 00:40:08.226590
+_.contents

# 2017-09-01 00:40:23.195671
+_.children

# 2017-09-01 00:40:32.571102
+table = parsed.find('table')

# 2017-09-01 00:40:35.994774
+table.children

# 2017-09-01 00:40:44.120333
+list(table.children)

# 2017-09-01 00:42:03.619351
+parsed.table

# 2017-09-01 00:42:08.948463
+parsed.table.tr

# 2017-09-01 00:42:26.354288
+parsed.table.findall('td')

# 2017-09-01 00:42:42.426492
+parsed.table.find_all('td')

# 2017-09-01 00:42:57.715006
+'mutopiacomposer' in parsed.table.find_all('td')

# 2017-09-01 00:44:21.045333
+import re

# 2017-09-01 00:44:57.660802
+tabledata = parsed.table.find_all('td')

# 2017-09-01 00:51:20.552790
+for index, item in enumerate(tabledata):
+    if re.match(r'.*mutopiacomposer.*', item):
+        print(tabledata[index + 1])

# 2017-09-01 00:51:38.867767
+for index, item in enumerate(tabledata):
+    if re.match(r'.*mutopiacomposer.*', item):
+        ret = tabledata[index + 1]

# 2017-09-01 00:51:51.724929
+type(tabledata[0])

# 2017-09-01 00:52:09.279939
+test = tabledata[0]

# 2017-09-01 00:52:30.717892
+test.next

# 2017-09-01 00:52:55.689327
+for index, item in enumerate(tabledata):
+    if re.match(r'.*mutopiacomposer.*', str(item)):
+        ret = item.next

# 2017-09-01 00:52:57.080923
+ret

# 2017-09-01 00:53:08.764011
+for index, item in enumerate(tabledata):
+    if re.match(r'.*mutopiacomposer.*', str(item)):
+        ret = item.next.next

# 2017-09-01 00:53:10.417468
+ret

# 2017-09-01 00:53:25.024807
+for index, item in enumerate(tabledata):
+    if re.match(r'.*mutopiacomposer.*', str(item)):
+        ret = tabledata[index + 1]

# 2017-09-01 00:53:26.229729
+ret

# 2017-09-01 00:53:42.013838
+ret.split('<br/>')

# 2017-09-01 00:53:47.575860
+ret

# 2017-09-01 00:53:55.980178
+composers = str(ret)

# 2017-09-01 00:53:57.748121
+composers

# 2017-09-01 00:54:11.830833
+composers.split('<br/>')

# 2017-09-01 00:54:28.910701
+complist = composers.split('<br/>')

# 2017-09-01 00:54:37.345923
+complist[1].strip()

# 2017-09-01 00:54:54.251542
+comps = complist.split(', ')

# 2017-09-01 00:55:08.287159
+comps = complist[1].strip().split(', ')

# 2017-09-01 00:55:10.553804
+comps

# 2017-09-01 00:55:42.606926
+comps[-1] = comps[-1].replace('</td>', '').strip()

# 2017-09-01 00:55:46.293885
+comps[-1]

# 2017-09-01 00:55:48.453413
+comps

# 2017-09-01 00:56:11.083180
+ret.get_text()

# 2017-09-01 00:56:44.087816
+comps

# 2017-09-01 00:59:47.347418
+text = ret.get_text()

# 2017-09-01 00:59:49.257679
+text

# 2017-09-01 01:00:11.218670
+splittext = text.split('as follows:\n')

# 2017-09-01 01:00:13.564482
+splittext

# 2017-09-01 01:03:29.818484
+for index, item in enumerate(tabledata):
+    if 'mutopiacomposer' in item.gettext():
+        ret = tabledata[index + 1]

# 2017-09-01 01:04:25.306210
+for index, item in enumerate(tabledata):
+    if 'mutopiacomposer' in str(item):
+        ret = tabledata[index + 1]

# 2017-09-01 01:04:26.410348
+ret

# 2017-09-01 01:04:46.318603
+ret.get_text()

# 2017-09-01 01:07:38.584267
+assert ''

# 2017-09-01 01:07:41.510567
+assert 'hi'

# 2017-09-01 01:08:32.691416
+for index, item in enumerate(tabledata):
+    if 'mutopiacomposer' in item.get_text():
+        ret = tabledata[index + 1]

# 2017-09-01 01:08:34.808948
+ret

# 2017-09-01 01:11:19.745863
+for index, item in enumerate(tabledata):
+    if 'style' in item.get_text():
+        ret = tabledata[index + 1]

# 2017-09-01 01:11:21.335793
+ret

# 2017-09-01 01:12:04.006105
+for index, item in enumerate(tabledata):
+    if 'style' in item.get_text():
+        ret = tabledata[index + 1]
+        break

# 2017-09-01 01:12:05.985801
+ret

# 2017-09-01 01:12:23.062137
+assert 'Baroque' in ret.get_text()

# 2017-09-01 01:12:28.774775
+assert 'Baroquejireopaoh' in ret.get_text()

# 2017-09-01 01:14:51.858245
+for index, item in enumerate(tabledata):
+    if 'license' in item.get_text():
+        ret = tabledata[index + 1]
+        break

# 2017-09-01 01:14:53.084864
+ret

# 2017-09-01 01:15:15.984647
+ret.find_all('li')

# 2017-09-01 01:15:27.939533
+licenses = _

# 2017-09-01 01:15:50.488155
+licenselist = [item.get_text() for item in licenses]

# 2017-09-01 01:15:55.408458
+licenselist

# 2017-09-01 01:30:03.816565
+from lyskel import mutopia

# 2017-09-01 01:31:16.452913
+mutopia.SITE

# 2017-09-01 01:31:40.047516
+html = mutopia._scrape_mutopia()

# 2017-09-01 01:32:06.864877
+from lyskel import mutopia

# 2017-09-01 01:32:08.749923
+mutopia.SITE

# 2017-09-01 01:32:14.554356
+html = mutopia._scrape_mutopia()

# 2017-09-01 01:32:48.902925
+from lyskel import mutopia

# 2017-09-01 01:33:15.340928
+mutopia.SITE

# 2017-09-01 01:33:22.917443
+mutopia._scrape_mutopia

# 2017-09-01 01:33:25.162160
+mutopia._scrape_mutopia()

# 2017-09-01 01:33:42.017994
+from lyskel import mutopia

# 2017-09-01 01:33:45.074355
+mutopia._scrape_mutopia()

# 2017-09-01 01:35:18.307730
+from lyskel import mutopia

# 2017-09-01 01:35:20.408322
+mutopia._scrape_mutopia()

# 2017-09-01 01:35:35.063862
+from lyskel import mutopia

# 2017-09-01 01:35:59.228030
+mutopia.SITE

# 2017-09-01 01:36:04.214323
+mutopia._scrape_mutopia()

# 2017-09-01 01:36:20.061321
+from lyskel import mutopia

# 2017-09-01 01:36:28.045519
+html = mutopia._scrape_mutopia()

# 2017-09-01 01:36:29.857814
+html

# 2017-09-01 01:36:36.877509
+mutopia.SITE

# 2017-09-01 01:36:56.505121
+test = mutopia.SITE

# 2017-09-01 01:37:16.773941
+text = mutopia._get_mutopia_table_data('style')

# 2017-09-01 01:38:04.882885
+from lyskel import mutopia

# 2017-09-01 01:38:07.988377
+mutopia.SITE

# 2017-09-01 01:38:14.913142
+test1 =mutopia.SITE

# 2017-09-01 01:38:25.662634
+html = mutopia._scrape_mutopia()

# 2017-09-01 01:38:27.272052
+html

# 2017-09-01 01:38:46.139202
+assert test1 is mutopia.SITE

# 2017-09-01 01:38:55.638398
+text = mutopia._get_mutopia_table_data('style')

# 2017-09-01 01:39:14.762362
+test2 = mutopia.SITE

# 2017-09-01 01:39:16.543294
+text

# 2017-09-01 01:39:39.783271
+licences = _get_licenses()

# 2017-09-01 01:39:45.728400
+licences = mutopia._get_licenses()

# 2017-09-01 01:39:52.640635
+assert test2 is mutopia.SITE

# 2017-09-01 01:40:00.389081
+licenses

# 2017-09-01 01:40:05.585724
+licences

# 2017-09-01 01:40:32.706792
+validate_mutopia(field='composer', data='BachJS')

# 2017-09-01 01:40:39.149812
+mutopia.validate_mutopia(field='composer', data='BachJS')

# 2017-09-01 01:41:22.967126
+from lyskel import mutopia

# 2017-09-01 01:41:27.455224
+mutopia.validate_mutopia(field='composer', data='BachJS')

# 2017-09-01 01:41:32.284446
+mutopia.validate_mutopia(field='composer', data='BachJfjisofdf')

# 2017-09-01 01:42:59.078526
+from lyskel import mutopia

# 2017-09-01 01:43:02.645628
+mutopia.validate_mutopia(field='composer', data='BachJfjisofdf')

# 2017-09-01 03:30:02.833592
+test = None

# 2017-09-01 03:30:17.570022
+assert isinstance(test, (NoneType, list))

# 2017-09-01 03:30:22.603834
+type(test)

# 2017-09-01 03:30:48.883290
+assert isinstance(test, (None, list))

# 2017-09-01 03:30:58.325189
+assert isinstance(test, (str, list))

# 2017-09-01 03:31:03.370773
+test = 'hi'

# 2017-09-01 03:31:05.044075
+assert isinstance(test, (str, list))

# 2017-09-01 03:37:52.006618
+test = [1, 2, 3, 4, 5]

# 2017-09-01 03:37:59.654626
+five = test.pop()

# 2017-09-01 03:38:00.950101
+five

# 2017-09-01 03:38:02.841563
+test

# 2017-09-01 03:50:11.213780
+test.stupid()

# 2017-09-01 03:50:15.528996
+test.stupid

# 2017-09-02 17:05:51.421505
+test = 'Anonymous'

# 2017-09-02 17:05:55.951427
+test.count(' ')

# 2017-09-02 17:06:04.857111
+assert 0

# 2017-09-02 17:18:39.289025
+name = 'Johann Sebastian Bach'

# 2017-09-02 17:19:08.730991
+while name.count(' ') > 0:
+    space = name.index(' ')
+    name = name[space:]

# 2017-09-02 17:19:25.217265
+while name.count(' ') > 0:
+    space = name.index(' ')
+    print(name.count(' '))
+    name = name[space:]

# 2017-09-02 17:19:40.610446
+while name.count(' ') > 0:
+    space = name.index(' ')
+    name = name[space:]
+    print(name)

# 2017-09-02 17:20:14.505237
+while name.count(' ') > 0:
+    print(name)
+    space = name.index(' ')
+    name = name[space:]
+    print(name)

# 2017-09-02 17:21:01.192242
+name.split(' ')

# 2017-09-02 17:21:08.331858
+name = 'Johann Sebastian Bach'

# 2017-09-02 17:21:09.513491
+name.split(' ')

# 2017-09-02 17:21:26.526078
+name[0][0]

# 2017-09-02 17:21:34.499588
+len(name)

# 2017-09-02 17:21:51.892060
+parts = name.split(' ')

# 2017-09-02 17:22:15.974881
+lname = name.pop()

# 2017-09-02 17:22:21.082972
+lname = parts.pop()

# 2017-09-02 17:22:27.744545
+parts

# 2017-09-02 17:22:44.297347
+for part in parts:
+    sname += part[0] + '.'

# 2017-09-02 17:22:47.623197
+sname = ''

# 2017-09-02 17:22:49.522695
+for part in parts:
+    sname += part[0] + '.'

# 2017-09-02 17:22:54.855568
+sname += lname

# 2017-09-02 17:23:01.257165
+sname

# 2017-09-02 17:23:16.433328
+name = 'Anonymous'

# 2017-09-02 17:23:18.950721
+name.split()

# 2017-09-02 17:23:31.095732
+'Johann Sebastian Bach'.split()

# 2017-09-02 17:46:34.231194
+from tinydb import TinyDB

# 2017-09-02 17:46:40.866697
+from lyskel import info

# 2017-09-02 17:48:27.882913
+bach = info.Composer(name="Johann Sebastian Bach")

# 2017-09-02 17:48:30.766256
+bach.get_mutopia_name()

# 2017-09-02 17:48:36.146926
+bach.get_mutopia_name(guess=True)

# 2017-09-02 17:50:20.320549
+test = []

# 2017-09-02 17:50:24.741161
+test[0][0]

# 2017-09-02 17:50:50.139043
+assert '' in 'hi'

# 2017-09-02 17:51:23.312886
+from lyskel import info

# 2017-09-02 17:51:27.140531
+bach = info.Composer(name="Johann Sebastian Bach")

# 2017-09-02 17:51:29.860021
+bach.get_mutopia_name(guess=True)

# 2017-09-02 17:52:58.048169
+bach.get_short_name()

# 2017-09-02 17:53:01.053218
+bach

# 2017-09-02 17:53:09.577348
+from tinydb import TinyDB

# 2017-09-02 17:53:20.592922
+db = TinyDB('lyskel/default_db.json')

# 2017-09-02 17:53:22.304245
+db

# 2017-09-02 17:53:27.517566
+bach.add_to_db(db)

# 2017-09-02 17:53:37.587297
+db.table('composers').all()

# 2017-09-02 17:57:29.589484
+from tinydb import TinyDB

# 2017-09-02 17:57:34.790259
+from lyskel import info

# 2017-09-02 17:58:06.536895
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 17:59:50.859854
+from lyskel import info

# 2017-09-02 17:59:52.099399
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:00:43.259613
+from lyskel import info

# 2017-09-02 18:00:45.773845
+from tinydb import TinyDB

# 2017-09-02 18:00:52.634053
+db = TinyDB('lyskel/default_db.json')

# 2017-09-02 18:01:12.067533
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:03:48.947266
+from lyskel import info

# 2017-09-02 18:03:50.614687
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:04:21.450261
+from lyskel import info

# 2017-09-02 18:04:27.154369
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:05:27.927756
+from lyskel import info

# 2017-09-02 18:05:29.068546
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:06:21.968710
+from lyskel import info

# 2017-09-02 18:06:23.023899
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:07:07.764241
+comps = 'hi'

# 2017-09-02 18:07:09.849999
+list(comps)

# 2017-09-02 18:07:35.524205
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:07:50.558823
+from lyskel import info

# 2017-09-02 18:07:52.350887
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:08:12.194354
+from lyskel import info

# 2017-09-02 18:08:17.584288
+from tinydb import TinyDB

# 2017-09-02 18:08:23.499489
+db = TinyDB('lyskel/default_db.json')

# 2017-09-02 18:08:32.371949
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:08:53.066253
+from lyskel import info

# 2017-09-02 18:08:56.538105
+from tinydb import TinyDB

# 2017-09-02 18:09:03.967071
+db = TinyDB('lyskel/default_db.json')

# 2017-09-02 18:09:08.025306
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:09:27.488572
+from lyskel import info

# 2017-09-02 18:09:29.139101
+from tinydb import TinyDB

# 2017-09-02 18:09:31.272857
+db = TinyDB('lyskel/default_db.json')

# 2017-09-02 18:09:33.404685
+bach2 = info.Composer.load_from_db(name="Johann Sebastian Bach", db=db)

# 2017-09-02 18:09:36.151773
+bach2

# 2017-09-02 19:35:04.258095
+import requests

# 2017-09-02 19:35:08.512287
+from bs4 import BeautifulSoup

# 2017-09-02 19:35:38.267175
+site = requests.get('http://mutopiaproject.org/advsearch.html')

# 2017-09-02 19:35:43.711734
+site = requests.get('http://www.mutopiaproject.org/advsearch.html')

# 2017-09-02 19:35:46.198735
+site

# 2017-09-02 19:36:03.726522
+html = BeautifulSoup(site.content, 'html.parser')

# 2017-09-02 19:36:05.798683
+html

# 2017-09-02 19:37:48.986851
+html.find(name="Instrument")

# 2017-09-02 19:38:05.048955
+html.find(id='adv-instr-sel')

# 2017-09-02 19:38:14.572535
+inst=html.find(id='adv-instr-sel')

# 2017-09-02 19:38:16.183763
+inst

# 2017-09-02 19:38:30.319706
+inst.find_all('option')

# 2017-09-02 19:45:29.158983
+instrs = []

# 2017-09-02 19:45:46.383126
+for item in inst.find_all('option'):
+    instrs.append(item.get_text)

# 2017-09-02 19:45:49.077672
+instrs

# 2017-09-02 19:46:14.119680
+instrs = []

# 2017-09-02 19:46:22.051402
+for item in inst.find_all('option'):
+    instrs.append(item.get_text())

# 2017-09-02 19:46:23.950790
+instrs

# 2017-09-02 19:49:44.880255
+for item in inst.find_all('option'):
+    print(item.value)

# 2017-09-02 19:50:48.917015
+for item in inst.find_all('option'):
+    print(item['value'])

# 2017-09-02 19:53:37.474721
+exit90

# 2017-09-02 20:18:31.429951
+from fuzzywuzzy import process

# 2017-09-02 20:23:56.315039
+from lyskel import mutopia

# 2017-09-02 20:24:04.131894
+comps = mutopia._get_composers()

# 2017-09-02 20:24:05.115863
+comps

# 2017-09-02 20:24:30.607486
+process.extractOne('Johann Sebastian Bach', comps)

# 2017-09-02 20:24:43.363299
+process.extractOne('J.S. Bach')

# 2017-09-02 20:24:46.770914
+process.extractOne('J.S. Bach', comps)

# 2017-09-02 20:25:20.196615
+process.extractOne('Felix Mendelsohn Bartholdy', comps)

# 2017-09-02 20:25:45.927261
+process.extractOne('Nicolo Paganini', comps)

# 2017-09-02 20:26:07.654677
+process.extractOne('John Phillip Sousa', comps)

# 2017-09-02 20:26:23.280993
+process.extractOne('Carl Phillip Emanuel Bach', comps)

# 2017-09-02 20:26:34.610027
+process.extractOne('Totally Fake Composer', comps)

# 2017-09-02 20:27:05.685653
+process.extractOne('Pyotr Ilyich Tchaicovsky', comps)

# 2017-09-02 22:00:01.984965
+from lyskel import info

# 2017-09-02 22:00:42.683156
+from lyskel import lynames

# 2017-09-02 22:00:48.619984
+from tinydb import TinyDB

# 2017-09-02 22:01:07.877440
+db = TinyDB('lyskel/default_db.json')

# 2017-09-02 22:01:35.244418
+ins = lynames.Instrument.load_from_db(db=db, name='violin')

# 2017-09-02 22:01:36.995183
+ins

# 2017-09-02 22:02:35.643358
+test = info.MutopiaHeaders(instrument_list=[ins],
+                           source='hi',
+                           style='Baroque',
+                           )

# 2017-09-02 22:02:36.868201
+test

# 2017-09-02 22:02:40.451205
+test.license

# 2017-09-02 22:02:46.928966
+test.maintainer

# 2017-09-02 22:02:53.298995
+test.instrument_list

# 2017-09-02 23:10:07.935177
+from subprocess import run

# 2017-09-02 23:10:18.408687
+run(['lilypond', '--version'])

# 2017-09-02 23:10:22.477253
+import subprocess

# 2017-09-02 23:10:47.286164
+lvers = run(['lilypond', '--version'], stdout=subprocess.PIPE)

# 2017-09-02 23:10:49.050183
+lvers

# 2017-09-02 23:10:57.624583
+lvers.stdout

# 2017-09-02 23:11:10.914225
+import re

# 2017-09-02 23:12:11.183736
+num = re.search(r'LilyPond ([^\n]*)', lyvers)

# 2017-09-02 23:12:18.565049
+num = re.search(r'LilyPond ([^\n]*)', lvers.stdout)

# 2017-09-02 23:12:31.212670
+num = re.search(r'LilyPond ([^\n]*)', lvers.stdout.decode('utf-8'))

# 2017-09-02 23:12:34.698426
+num

# 2017-09-02 23:12:40.304844
+num.group()

# 2017-09-02 23:12:43.295700
+num.group(1)

# 2017-09-02 23:23:56.033553
+import requests

# 2017-09-02 23:24:00.491678
+from bs4 import BeautifulSoup

# 2017-09-02 23:27:51.564524
+import subprocess

# 2017-09-02 23:28:19.805802
+loc = subprocess.run(['which', 'lilypond'], stdout=subprocess.PIPE)

# 2017-09-02 23:28:20.657121
+loc

# 2017-09-02 23:28:23.945117
+loc.stdout

# 2017-09-02 23:28:33.493188
+from pathlib import PATH

# 2017-09-02 23:28:39.184244
+from pathlib import Path

# 2017-09-02 23:28:43.284749
+Path(loc.stdout)

# 2017-09-02 23:28:55.543491
+Path(loc.stdout.decode('utf-8'))

# 2017-09-02 23:29:02.559909
+Path(loc.stdout.decode('utf-8').strip())

# 2017-09-02 23:29:09.142681
+lypath = _

# 2017-09-02 23:29:14.386835
+lypath.parent[0]

# 2017-09-02 23:29:17.521405
+lypath.parents[0]

# 2017-09-02 23:29:48.195372
+import os

# 2017-09-02 23:31:30.818647
+for root, dirs, files in os.walk(lypath.parents[0]):
+    if 'default-note-names.scm' in files:
+        print(Path(root, name))

# 2017-09-02 23:31:55.107120
+for root, dirs, files in os.walk(lypath.parents[1]):
+    if 'default-note-names.scm' in files:
+        print(Path(root, name))

# 2017-09-02 23:32:10.743868
+lypath.parents[1]

# 2017-09-02 23:32:57.420374
+for root, dirs, files in os.walk(lypath.parents[1]):
+    if 'lib' in dirs:
+        print(Path(root, 'lib'))

# 2017-09-02 23:33:23.621499
+for root, dirs, files in os.walk(lypath.parents[1]):
+    if 'default-note-names.scm' in files:
+        print(Path(root, 'default-note-names.scm'))

# 2017-09-02 23:34:05.167883
+for root, dirs, files in os.walk(lypath.parents[1]):
+    if 'default-note-names.scm' in files:
+        print('found')

# 2017-09-02 23:34:47.093305
+with open('/usr/lib/lilypond/scm/default-note-names.scm', 'rb') as f:
+    test = f.read()

# 2017-09-02 23:35:25.634594
+with open('/usr/share/lilypond/scm/default-note-names.scm', 'rb') as f:
+    test = f.read()

# 2017-09-02 23:36:52.245399
+import subprocess

# 2017-09-02 23:36:57.305104
+from pathlib import Path

# 2017-09-02 23:51:54.359735
+import sys

# 2017-09-02 23:51:58.787706
+sys.stdout.encoding

# 2017-09-03 00:05:28.120095
+from pathlib import Path

# 2017-09-03 00:05:40.681196
+import re

# 2017-09-03 00:05:58.785874
+import subprocess

# 2017-09-03 00:06:33.246635
+text = subprocess.run(['lilypond', '--version'], stdout=subprocess.PIPE)

# 2017-09-03 00:07:09.839074
+num = re.search(r'LilyPond [^\n]*', text.stdout.decode('utf-8'))

# 2017-09-03 00:07:10.999842
+num

# 2017-09-03 00:07:15.171559
+num.group(1)

# 2017-09-03 00:07:26.456854
+num = re.search(r'LilyPond ([^\n]*)', text.stdout.decode('utf-8'))

# 2017-09-03 00:07:28.408320
+num

# 2017-09-03 00:07:36.665392
+num.group(1)

# 2017-09-03 00:08:45.317606
+langpath = Path('/usr', 'share', 'lilypond', num.group(1), 'scm', 'default-note-names.scm')

# 2017-09-03 00:08:47.253571
+langpath

# 2017-09-03 00:09:17.356696
+with open(langpath, 'rb') as f:
+    stuff = f.read()

# 2017-09-03 00:13:46.640979
+langpath = Path('/usr', 'share', 'lilypond', num.group(1), 'scm', 'define-note-names.scm')

# 2017-09-03 00:14:07.852812
+for root, dirs, files in os.walk(lypath.parents[0]):
+    if 'define-note-names.scm' in files:
+        print(Path(root, name))

# 2017-09-03 00:14:11.331364
+import os

# 2017-09-03 00:14:13.632159
+for root, dirs, files in os.walk(lypath.parents[0]):
+    if 'define-note-names.scm' in files:
+        print(Path(root, name))

# 2017-09-03 00:14:51.707351
+run = subprocess.run(['which', 'lilypond'], stdout=subprocess.PIPE)

# 2017-09-03 00:15:18.503045
+lypath = Path(run.stdout.decode('utf-8'))

# 2017-09-03 00:15:19.830753
+lypath

# 2017-09-03 00:15:25.359483
+lypath = Path(run.stdout.decode('utf-8').strip())

# 2017-09-03 00:15:44.374449
+for root, dirs, files in os.walk(lypath.parents[1]):
+    if 'define-note-names.scm' in files:
+        print(Path(root, name))

# 2017-09-03 00:16:05.418321
+for root, dirs, files in os.walk(lypath.parents[1]):
+    if 'define-note-names.scm' in files:
+        print(Path(root, 'define-note-names.scm'))

# 2017-09-03 00:17:59.199937
+def get_ly_langs():
+    for root, dirs, files in os.walk(lypath.parents[1]):
+        if 'lilypond' in dirs:
+            nextpath = Path(root, 'lilypond')
+            break
+    for root, dirs, files in os.walkt(newpath):
+        if 'define-note-names.scm' in files:
+            return Path(root, 'define-note-names.scm')

# 2017-09-03 00:18:04.879016
+get_ly_langs()

# 2017-09-03 00:18:12.909742
+def get_ly_langs():
+    for root, dirs, files in os.walk(lypath.parents[1]):
+        if 'lilypond' in dirs:
+            nextpath = Path(root, 'lilypond')
+            break
+    for root, dirs, files in os.walk(newpath):
+        if 'define-note-names.scm' in files:
+            return Path(root, 'define-note-names.scm')

# 2017-09-03 00:18:18.647119
+get_ly_langs()

# 2017-09-03 00:18:32.179051
+def get_ly_langs():
+    for root, dirs, files in os.walk(lypath.parents[1]):
+        if 'lilypond' in dirs:
+            nextpath = Path(root, 'lilypond')
+            break
+    for root, dirs, files in os.walk(nextpath):
+        if 'define-note-names.scm' in files:
+            return Path(root, 'define-note-names.scm')

# 2017-09-03 00:18:37.256196
+get_ly_langs()

# 2017-09-03 00:18:44.763108
+print(get_ly_langs())

# 2017-09-03 00:19:11.924499
+def get_ly_langs():
+    for root, dirs, files in os.walk(lypath.parents[1]):
+        if 'lilypond' in files:
+            nextpath = Path(root, 'lilypond')
+            break
+    for root, dirs, files in os.walk(nextpath):
+        if 'define-note-names.scm' in files:
+            return Path(root, 'define-note-names.scm')

# 2017-09-03 00:21:32.519762
+def get_ly_langs():
+    nextpaths = []
+    for root, dirs, files in os.walk(lypath.parents[1]):
+        if 'lilypond' in dirs:
+            nextpaths.append(Path(root, 'lilypond'))
+    for path in nextpaths:
+        for root, dirs, files in os.walk(path):
+            if 'define-note-names.scm' in files:
+                return Path(root, 'define-note-names.scm')

# 2017-09-03 00:21:49.464096
+print(get_ly_langs())

# 2017-09-03 00:23:18.152152
+def get_ly_langs():
+    share = Path(lypath.parents[1], 'share')
+    for root, dirs, files in os.walk(path):
+        if 'define-note-names.scm' in files:
+            return Path(root, 'define-note-names.scm')

# 2017-09-03 00:23:27.170298
+def get_ly_langs():
+    share = Path(lypath.parents[1], 'share')
+    for root, dirs, files in os.walk(share):
+        if 'define-note-names.scm' in files:
+            return Path(root, 'define-note-names.scm')
+

# 2017-09-03 00:23:38.894865
+print(get_ly_langs())

# 2017-09-03 00:23:58.080325
+def get_ly_langs():
+    share = Path(lypath.parents[1], 'share', 'lilypond')
+    for root, dirs, files in os.walk(share):
+        if 'define-note-names.scm' in files:
+            return Path(root, 'define-note-names.scm')

# 2017-09-03 00:24:02.467419
+print(get_ly_langs())

# 2017-09-03 00:26:38.743865
+vers = subprocess.run(['lilypond', '--version'], stdout=subprocess.PIPE)

# 2017-09-03 00:27:00.789276
+num

# 2017-09-03 00:27:06.372804
+vers = num.group(1)

# 2017-09-03 00:27:07.779679
+vers

# 2017-09-03 00:27:35.069361
+Path('/usr', 'share', 'lilypond', vers, 'scm', 'define-note-names.scm')

# 2017-09-03 00:27:39.736573
+path = _

# 2017-09-03 00:27:55.086888
+with open(path) as f:
+    everything = f.read()

# 2017-09-03 00:28:33.840314
+regex = re.compile(r'Language: ([^\s]*)', re.M|re.I)

# 2017-09-03 00:28:35.938892
+regex

# 2017-09-03 00:28:57.831996
+langs = regex.findall(everything)

# 2017-09-03 00:28:58.865364
+langs

# 2017-09-03 00:29:18.378244
+languages = [lang.lower() for lang in langs]

# 2017-09-03 00:29:19.967758
+languages

# 2017-09-03 21:29:59.586201
+import attr

# 2017-09-03 21:30:28.399638
+@attr.s
+class Test():
+    name = attr.ib()
+    file = attr.ib()

# 2017-09-03 21:30:38.624351
+new = Test(name='hi', file='thefile')

# 2017-09-03 21:30:43.089404
+new.iteritems()

# 2017-09-03 21:35:00.614299
+@attr.s
+class Test():
+    name = attr.ib()
+    file = attr.ib()

# 2017-09-03 21:35:05.556529
+import attr

# 2017-09-03 21:35:07.253629
+@attr.s
+class Test():
+    name = attr.ib()
+    file = attr.ib()

# 2017-09-03 21:35:14.154122
+new = Test(name='hi', file='thefile')

# 2017-09-03 21:35:21.294881
+dict(new).iteritems()

# 2017-09-03 21:35:26.271507
+dict(new)

# 2017-09-03 21:35:36.763091
+attr.asdict(Test)

# 2017-09-03 21:50:18.019203
+attr.asdict(new)

# 2017-09-03 22:01:39.220441
+from jinja2 import Environment, PackageLoader

# 2017-09-03 22:02:34.435048
+env = Environment(
+    loader=PackageLoader('templates')
+    )

# 2017-09-03 22:02:45.753864
+templage = env.get_template('defs.ly')

# 2017-09-03 22:03:16.184425
+env = Environment(
+    loader=PackageLoader('.', 'templates')
+    )

# 2017-09-03 22:03:29.869938
+env = Environment(
+    loader=PackageLoader('lyskel', 'templates')
+    )

# 2017-09-03 22:03:31.588146
+env

# 2017-09-03 22:03:41.456159
+template = env.get_template('defs.ly')

# 2017-09-03 22:04:06.716954
+env = Environment(
+    loader=PackageLoader('templates')
+    )

# 2017-09-03 22:04:13.428855
+env.get_template('defs.ly')

# 2017-09-03 22:06:19.902958
+from jinja2 import Environment, PackageLoader

# 2017-09-03 22:06:27.296006
+env = Environment(
+    loader=PackageLoader('lyskel', 'templates')
+    )

# 2017-09-03 22:06:34.685358
+env.get_template('defs.ly')

# 2017-09-03 22:06:43.733746
+template = _

# 2017-09-03 22:06:49.538779
+from lyskel import info

# 2017-09-03 22:07:55.478817
+from lyskel import lynames

# 2017-09-03 22:08:00.947690
+from tinydb import TinyDB

# 2017-09-03 22:08:12.989621
+db = TinyDB('lyskel/default_db.json')

# 2017-09-03 22:08:13.960912
+db

# 2017-09-03 22:08:34.666083
+ens = lynames.Ensemble.load_from_db('string_quartet', db=db)

# 2017-09-03 22:08:35.789811
+ens

# 2017-09-03 22:09:42.080342
+muheaders = info.MutopiaHeaders(instrument_list=ens, source='test', style='Classical')

# 2017-09-03 22:10:39.061576
+headers = Headers(title='Test Piece', tagline='test tagline')

# 2017-09-03 22:10:44.694463
+headers = info.Headers(title='Test Piece', tagline='test tagline')

# 2017-09-03 22:10:57.861409
+headers.add_mutopia_headers(muheaders, guess_composer=True)

# 2017-09-03 22:11:40.261384
+piece = info.Piece.init_version(name='testpiece', headers=headers, language='english')

# 2017-09-03 22:12:09.569749
+print(template.render(piece=piece))

# 2017-09-03 22:12:49.169554
+with open('/home/rick/tmp/testrender.ly') as outfile:
+    outfile.write(template.render(piece=piece))

# 2017-09-03 22:13:00.210647
+with open('/home/rick/tmp/testrender.ly', 'wb') as outfile:
+    outfile.write(template.render(piece=piece))

# 2017-09-03 22:13:06.068400
+with open('/home/rick/tmp/testrender.ly', 'w') as outfile:
+    outfile.write(template.render(piece=piece))

# 2017-09-03 22:33:53.849490
+template = env.get_template('defs.ly')

# 2017-09-03 22:34:04.491729
+with open('/home/rick/tmp/testrender2.ly', 'w') as outfile:
+    outfile.write(template.render(piece=piece))

# 2017-09-03 22:35:49.416131
+template = env.get_template('defs.ly')

# 2017-09-03 22:35:58.422994
+with open('/home/rick/tmp/testrender3.ly', 'w') as outfile:
+    outfile.write(template.render(piece=piece))

# 2017-09-03 22:38:12.327032
+template = env.get_template('defs.ly')

# 2017-09-03 22:38:20.783921
+with open('/home/rick/tmp/testrender4.ly', 'w') as outfile:
+    outfile.write(template.render(piece=piece))

# 2017-09-05 01:36:32.898348
+stuff = ('c', 'major')

# 2017-09-05 01:36:41.552997
+assert isinstance(stuff, tuple)

# 2017-09-05 01:36:44.927433
+stuff[0]

# 2017-09-05 01:36:51.475578
+stuff[0][0]

# 2017-09-05 01:37:00.933546
+stuff[0][1]

# 2017-09-05 01:39:21.171489
+[a-g]

# 2017-09-12 23:59:00.492245
+print(str(1).zfill(2))

# 2017-09-21 16:32:46.624488
+item = Path('/home', 'rick', 'test')

# 2017-09-21 16:32:51.451747
+from pathlib import Path

# 2017-09-21 16:32:52.576206
+item = Path('/home', 'rick', 'test')

# 2017-09-21 16:32:54.797320
+item

# 2017-09-21 16:32:56.985376
+str(item)

# 2017-09-21 16:36:45.658735
+exit
# 2017-09-19 00:21:35.526958
+import airtable

# 2017-09-19 00:21:36.764967
+import os

# 2017-09-19 00:23:14.704879
+import airtable

# 2017-09-19 00:27:21.873901
+exit

# 2017-09-19 00:33:32.279343
+import test

# 2017-09-19 00:34:59.422556
+import airtable

# 2017-09-19 00:35:00.645747
+import os

# 2017-09-19 00:35:10.325840
+key = os.environ['ATKEY']

# 2017-09-19 00:35:11.818686
+key

# 2017-09-19 00:35:28.822008
+db = os.environ['ATDB']

# 2017-09-19 00:35:48.563140
+db

# 2017-09-19 00:36:39.321186
+from airtable.airtable import Airtable

# 2017-09-19 00:36:56.115781
+atdb = Airtable(db, key)

# 2017-09-19 00:36:57.635266
+atdb

# 2017-09-19 00:37:13.125579
+atdb.get('Task')

# 2017-09-19 00:37:25.860158
+taskitems = _

# 2017-09-19 00:43:08.743554
+livedb = Airtable('appUh2DzWQGZgOdxu', key)

# 2017-09-19 00:43:19.434306
+taskitems = livedb.get('Task')

# 2017-09-19 00:43:21.395708
+taskitems

# 2017-09-19 00:44:20.966299
+print(taskitems)

# 2017-09-19 00:44:39.021496
+for item in taskitems:
+    print(item)

# 2017-09-19 00:44:52.548366
+for item in taskitems.records:
+    print(item)

# 2017-09-19 00:45:03.609061
+for item in taskitems['records']:
+    print(item)

# 2017-09-19 00:45:39.922140
+for item in taskitems['records']:
+    if 'Asst editor' in item['Task']:
+        sampleitem = item

# 2017-09-19 00:46:06.907996
+for item in taskitems['records']['fields']:
+    if 'Asst editor' in item['Task']:
+        sampleitem = item

# 2017-09-19 00:46:25.341429
+for item in taskitems['records'][0]['fields']:
+    if 'Asst editor' in item['Task']:
+        sampleitem = item

# 2017-09-19 00:46:53.044861
+print(taskitems['records'])

# 2017-09-19 00:46:58.503861
+print(taskitems['records'][0])

# 2017-09-19 00:47:07.729932
+print(taskitems['records'][0][2])

# 2017-09-19 00:47:10.346236
+print(taskitems['records'][0][1])

# 2017-09-19 00:47:20.880746
+print(taskitems['records'][0]['fields'])

# 2017-09-19 00:47:45.734987
+for item in taskitems['records'][0]:
+    if 'Asst editor' in item['fields']['Task']:
+        sampleitem = item['fields']

# 2017-09-19 00:48:12.193450
+for item in taskitems['records'][0]:
+    print(item)

# 2017-09-19 00:48:20.612611
+for item in taskitems['records'][0]:
+    print(item['fields'])

# 2017-09-19 00:48:29.801837
+for item in taskitems['records'][0]:
+    print(item)

# 2017-09-19 00:48:36.891643
+for item in taskitems['records'][0]:
+    print(item.fields)

# 2017-09-19 00:49:35.917748
+for item in taskitems['records']:
+    print(item['fields'])

# 2017-09-19 00:50:12.479800
+for item in taskitems['records']:
+    for thing in item['fields']:
+        print(thing)

# 2017-09-19 00:50:58.727472
+for item in taskitems['records']:
+    if 'Asst' in item['fields']['Task']:
+        print(item)

# 2017-09-19 00:51:17.861277
+for item in taskitems['records']:
+    try:
+        if 'Asst' in item['fields']['Task']:
+            print(item)
+    except KeyError:
+        pass

# 2017-09-19 00:51:52.328177
+for item in taskitems['records']:
+    try:
+        if 'asst' in item['fields']['Task'].lower():
+            print(item)
+    except KeyError:
+        pass

# 2017-09-19 00:51:58.368670
+for item in taskitems['records']:
+    try:
+        if 'asst' in item['fields']['Task'].lower():
+            print(item)
+    except KeyError:
+        continue

# 2017-09-19 00:52:14.546808
+for item in taskitems['records']:
+    try:
+        if 'asst' in item['fields']['Task'].lower():
+            print('found')
+    except KeyError:
+        continue

# 2017-09-19 00:52:25.713066
+for item in taskitems['records']:
+    try:
+        if 'finalize' in item['fields']['Task'].lower():
+            print('found')
+    except KeyError:
+        continue

# 2017-09-19 00:52:41.689875
+len(taskitems['records'])

# 2017-09-19 00:53:53.900966
+taskitems = livedb.get('Task', limit=500)

# 2017-09-19 00:54:06.406180
+taskitems

# 2017-09-19 00:54:19.396220
+len(taskitems['records'])

# 2017-09-19 00:54:26.621355
+taskitems = livedb.get('Task', limit=300)

# 2017-09-19 00:54:31.870737
+taskitems = livedb.get('Task')

# 2017-09-19 00:54:34.224251
+taskitems

# 2017-09-19 00:54:55.495205
+newitems = []

# 2017-09-19 00:55:16.338690
+offset = 0

# 2017-09-19 00:56:42.263575
+while True:
+    try:
+        newitems.append(livedb.get('Task', limit=1, offset=offset))
+        offset += 1
+    except (AttributeError, HTTPError):
+        break

# 2017-09-19 00:56:53.719891
+while True:
+    try:
+        newitems.append(livedb.get('Task', limit=1, offset=offset))
+        offset += 1
+    except (AttributeError):
+        break

# 2017-09-19 00:57:18.728750
+offset = ''

# 2017-09-19 00:57:51.085742
+newitem = livedb.get('Task', limit=1)

# 2017-09-19 00:57:52.687880
+newitme

# 2017-09-19 00:57:55.383974
+newitem

# 2017-09-19 00:58:04.720555
+newitems.append(newitem)

# 2017-09-19 00:58:07.546434
+newitems

# 2017-09-19 00:58:56.300254
+while True:
+    try:
+        item = livedb.get('Task', limit=1, offset=newitems[-1])
+        newitems.append(item)
+    except AttributeError:
+        break

# 2017-09-19 00:59:38.377039
+newitem

# 2017-09-19 00:59:41.961985
+newitem[0]

# 2017-09-19 00:59:47.872697
+newitem['records'][0]

# 2017-09-19 00:59:59.431016
+newitems = [newitem['records'][0]]

# 2017-09-19 01:00:11.891047
+newitems

# 2017-09-19 01:00:33.999748
+newitems[-1]['id']

# 2017-09-19 01:05:38.671472
+livedb.get('Task', filter_by_formula='FIND("Asst", {TASK})')

# 2017-09-19 01:10:25.080657
+import arrow

# 2017-09-19 01:11:58.345934
+utc = arrow.utcnow()

# 2017-09-19 01:12:14.312613
+local = utc.to('US/Eastern')

# 2017-09-19 01:12:15.777316
+local

# 2017-09-19 01:12:21.904114
+local.shift(days=1)

# 2017-09-19 01:12:26.802548
+local.format()

# 2017-09-19 01:12:39.967595
+local.humanize()

# 2017-09-19 01:12:58.186940
+tmr = local.shift(days=+1)

# 2017-09-19 01:13:01.762703
+tmr.humanize()

# 2017-09-19 01:13:12.434967
+tmr.date()

# 2017-09-19 01:15:02.968251
+livedb.get('Task', filter_by_formula='FIND("becker", {TASK})')

# 2017-09-19 01:15:37.825009
+tmr = local.shift(days=+1)

# 2017-09-19 01:16:37.826354
+print(tmr.format(fmt='YYYY-MM-DDTHH:mm:ss'))

# 2017-09-19 01:17:08.116666
+print(tmr.format(fmt='YYYY-MM-DDTHH:mm:ssZZ'))

# 2017-09-19 01:17:16.260830
+print(tmr.format(fmt='YYYY-MM-DDTHH:mm:ss.00Z'))

# 2017-09-19 02:46:57.659610
+import ast

# 2017-09-19 02:47:20.930058
+ast.literal_eval("[('test', 'one'), ('test', 'two')]")

# 2017-09-19 02:47:27.861689
+_[0][1]

# 2017-09-19 02:47:52.287031
+ast.literal_eval("[('test', 'one'), ('test', 'two')]")

# 2017-09-19 02:48:12.264789
+import test

# 2017-09-19 02:48:13.941723
+ast.literal_eval("[('test', 'one'), ('test', 'two')]")

# 2017-09-19 02:54:20.167051
+test = 'hi'

# 2017-09-19 02:54:23.008049
+test2 = ''

# 2017-09-19 02:55:06.828545
+if test ^ test2:
+    print('yes')

# 2017-09-19 02:55:37.188020
+if (test and not test2) or (test2 and not test):
+    raise Exception

# 2017-09-19 02:56:27.153595
+pytest

# 2017-09-29 01:31:56.381540
+import mlbgame

# 2017-09-29 01:32:52.254213
+mlbgame.teams()

# 2017-09-29 01:33:08.069097
+import mlbgame

# 2017-09-29 01:33:15.699332
+mlbgame.teams()

# 2017-09-29 01:33:26.045206
+teams = _

# 2017-09-29 01:33:29.921341
+teams[0]

# 2017-09-29 01:33:38.097396
+dict(teams[0])

# 2017-09-29 01:34:31.221170
+teams[0].__dict__

# 2017-09-29 01:35:03.251624
+for team in teams:
+    print(team)

# 2017-09-29 01:35:40.719050
+mlbgame.standings()

# 2017-09-29 01:35:45.083530
+print(_)

# 2017-09-29 01:36:05.649379
+standings = mlbgame.standings()

# 2017-09-29 01:36:11.363364
+standings.__dict__

# 2017-09-29 01:40:24.303903
+exit

# 2017-09-29 01:40:56.280444
+import pybaseball

# 2017-09-29 01:41:17.195665
+data = pybaseball.schedule_and_record(2017, "PHL")

# 2017-09-29 01:41:21.462209
+data = pybaseball.schedule_and_record(2017, "PHI")

# 2017-09-29 01:41:24.021559
+data

# 2017-09-29 01:41:32.834014
+dict(data)

# 2017-09-29 01:41:40.757969
+data

# 2017-09-29 01:42:47.708356
+data['wins']
=======
# 2017-09-28 21:26:25.681123
+import requests

# 2017-09-28 21:27:30.855738
+requests.get('http://www.baseballprospectus.com/sortable/index.php?cid=2022354')

# 2017-09-28 21:27:39.245554
+data = _

# 2017-09-28 21:27:42.438300
+data.content

# 2017-09-28 21:27:55.613831
+from bs4 import BeautifulSoup

# 2017-09-28 21:28:52.420961
+import requests

# 2017-09-28 21:29:06.780161
+first_page = requests.get('http://www.baseballprospectus.com/sortable/index.php?cid=2022354')

# 2017-09-28 21:29:16.740106
+soup1 = first_page.content

# 2017-09-28 21:29:35.193283
+soup1 = BeautifulSoup(first_page.content, 'html.parser')

# 2017-09-28 21:29:37.258046
+soup1

# 2017-09-28 21:29:48.295307
+soup1.find('NEXT>')

# 2017-09-28 21:30:34.108509
+links = soup1.find_all('a')

# 2017-09-28 21:30:35.679358
+links

# 2017-09-28 21:30:58.958615
+for link in links:
+    if 'NEXT' in link:
+        print(link.href)

# 2017-09-28 21:31:08.702087
+for link in links:
+    if 'NEXT' in link:
+        print(link)

# 2017-09-28 21:31:45.704387
+links

# 2017-09-28 21:31:52.260668
+links[10]

# 2017-09-28 21:32:08.747698
+for link in links:
+    if 'NEXT' in link.get_text():
+        print(link)

# 2017-09-28 21:32:21.554430
+for link in links:
+    if 'NEXT' in link.get_text():
+        requests.get(link.href)

# 2017-09-28 21:32:54.188416
+for link in links:
+    if 'NEXT' in link.get_text():
+        requests.get('http://www.baseballprospectus.com/sortable/' + link.href)

# 2017-09-28 21:33:02.744703
+for link in links:
+    if 'NEXT' in link.get_text():
+        print(link.href)

# 2017-09-28 21:34:29.764251
+for link in links:
+    if 'NEXT' in link.get_text():
+        print(link['href'])

# 2017-09-28 21:34:42.253560
+for link in links:
+    if 'NEXT' in link.get_text():
+        requests.get('http://www.baseballprospectus.com/sortable/' + link['href'])

# 2017-09-28 21:34:57.599708
+for link in links:
+    if 'NEXT' in link.get_text():
+        second_page = requests.get('http://www.baseballprospectus.com/sortable/' + link['href'])

# 2017-09-28 21:34:59.615589
+second

# 2017-09-28 21:35:02.476201
+second_p

# 2017-09-28 21:35:04.531502
+second_page

# 2017-09-28 21:35:07.692991
+second_page.content

# 2017-09-28 21:36:24.857734
+assert '<td>1.</td>' in soup1

# 2017-09-28 21:36:46.703753
+assert '<td>1.</td>' in first_page.content

# 2017-09-28 21:36:52.369327
+assert b'<td>1.</td>' in first_page.content

# 2017-09-28 21:37:01.114350
+assert b'<td>1.</td>' in second_page.content

# 2017-09-28 21:37:05.708163
+assert b'<td>1.</td>' not in second_page.content

# 2017-09-28 21:51:00.600876
+import requests

# 2017-09-28 21:51:10.758784
+from bs4 import BeautifulSoup

# 2017-09-28 21:51:26.397950
+first_page = requests.get('http://www.baseballprospectus.com/sortable/index.php?cid=2022354')

# 2017-09-28 21:51:40.984174
+soup1 = BeautifulSoup(first_page.content, 'html.parser')

# 2017-09-28 21:52:50.511428
+soup1.search(id='TTdata')

# 2017-09-28 21:52:55.229574
+soup1

# 2017-09-28 21:53:03.960447
+soup1.find(id='TTdata')

# 2017-09-28 21:53:09.115464
+table = soup1.find(id='TTdata')

# 2017-09-28 21:53:10.645770
+table

# 2017-09-28 21:53:37.001792
+for tr in table.find_all('tr'):
+    print(tr.get_text())

# 2017-09-28 21:54:24.210861
+cells = []

# 2017-09-28 21:54:46.391318
+for tr in table.find_all('tr'):
+    for td in tr.find_all('td'):
+        cells.append(td.get_text())

# 2017-09-28 21:54:47.831018
+cells

# 2017-09-28 21:55:03.235952
+rows = []

# 2017-09-28 21:55:22.899037
+for tr in table.find_all('tr'):
+    cells = []
+    for td in tr.find_all('td'):
+        cells.append(td.get_text())
+        rows.append(cells)

# 2017-09-28 21:55:24.439084
+tows

# 2017-09-28 21:55:26.548144
+rows

# 2017-09-28 21:57:06.102916
+rows = []

# 2017-09-28 21:57:50.385487
+table = soup1.find('table', id='TTdata')

# 2017-09-28 21:57:52.509771
+rows = []

# 2017-09-28 21:59:23.594013
+for tr in table.find_all('tr', class_='TTdata'):
+    cells = []
+    for td in tr.find_all('td', class_='right'):
+        cells.append(td.get_text())
+        rows.append(cells)

# 2017-09-28 21:59:26.264031
+rows

# 2017-09-28 22:00:54.792290
+for tr in table.find_all('tr', class_='TTdata'):
+    cells = []
+    cells.append(tr.search('a').get_text())
+    for td in tr.find_all('td', class_='right'):
+        cells.append(td.get_text())
+        rows.append(cells)

# 2017-09-28 22:01:08.773806
+for tr in table.find_all('tr', class_='TTdata'):
+    cells = []
+    cells.append(tr.find_all('a').get_text())
+    for td in tr.find_all('td', class_='right'):
+        cells.append(td.get_text())
+        rows.append(cells)

# 2017-09-28 22:01:20.785083
+for tr in table.find_all('tr', class_='TTdata'):
+    cells = []
+    cells.append(list(tr.find_all('a'))[0].get_text())
+    for td in tr.find_all('td', class_='right'):
+        cells.append(td.get_text())
+        rows.append(cells)

# 2017-09-28 22:01:23.658892
+rows

# 2017-09-28 22:01:32.929053
+rows = []

# 2017-09-28 22:01:35.616475
+for tr in table.find_all('tr', class_='TTdata'):
+    cells = []
+    cells.append(list(tr.find_all('a'))[0].get_text())
+    for td in tr.find_all('td', class_='right'):
+        cells.append(td.get_text())
+        rows.append(cells)

# 2017-09-28 22:01:37.106653
+rows

# 2017-09-28 22:02:02.389335
+for tr in table.find_all('tr', class_='TTdata'):
+    cells = []
+    for td in tr.children:
+        cells.append(td.get_text())
+        rows.append(cells)

# 2017-09-28 22:02:05.397989
+rows

# 2017-09-28 22:03:39.133412
+for tr in table.find_all('tr', class_='TTdata'):
+    print(tr)

# 2017-09-28 22:04:00.680562
+for tr in table.find_all('tr', class_='TTdata'):
+    print(tr.children)

# 2017-09-28 22:04:10.544030
+for tr in table.find_all('tr', class_='TTdata'):
+    print(list(tr.children))

# 2017-09-28 22:04:47.238370
+for tr in table.find_all('tr', class_='TTdata'):
+    stuff = list(tr.children)

# 2017-09-28 22:04:51.575836
+len(stuff)

# 2017-09-28 22:05:43.031000
+for tr in table.find_all('tr', class_='TTdata'):
+    cells = []
+    for td in tr.children:
+        cells.append(td.get_text())
+    rows.append(cells)

# 2017-09-28 22:05:45.723844
+rows

# 2017-09-28 22:05:52.035719
+rows = []

# 2017-09-28 22:05:55.945174
+for tr in table.find_all('tr', class_='TTdata'):
+    cells = []
+    for td in tr.children:
+        cells.append(td.get_text())
+    rows.append(cells)

# 2017-09-28 22:05:58.035664
+rows

# 2017-09-28 22:06:02.268865
+len(rows)

# 2017-09-28 22:09:06.263197
+for tr in table.find_all('tr', class_=['TTdata', 'TTdata_ltgrey']):
+    cells = []
+    for td in tr.children:
+        cells.append(td.get_text())
+    rows.append(cells)

# 2017-09-28 22:09:08.330185
+rows

# 2017-09-28 22:09:12.032710
+rows = []

# 2017-09-28 22:09:14.368183
+for tr in table.find_all('tr', class_=['TTdata', 'TTdata_ltgrey']):
+    cells = []
+    for td in tr.children:
+        cells.append(td.get_text())
+    rows.append(cells)

# 2017-09-28 22:09:17.040105
+len(rows)

# 2017-09-28 22:10:52.626078
+rows = []

# 2017-09-28 22:11:03.951676
+for tr in table.find_all('tr', class_=['TTdata', 'TTdata_ltgrey']):
+    cells = []
+    for td in tr.children:
+        cells.append(td.get_text())
+    rows.append(cells[2:])

# 2017-09-28 22:11:05.734695
+rows

# 2017-09-29 00:25:47.243978
+from nameparser import Huma

# 2017-09-29 00:25:50.408791
+from nameparser import HumanN

# 2017-09-29 00:25:52.059733
+from nameparser import HumanName

# 2017-09-29 00:26:04.084855
+HumanName('Kluber,Cory')

# 2017-09-29 00:43:30.974584
+from nameparser import HumanName

# 2017-09-29 00:43:40.449440
+HumanName('wood,Travis*')

# 2017-09-29 00:44:36.318236
+from nameparser import HumanName

# 2017-09-29 00:44:39.374210
+HumanName('wood,Travis')

# 2017-10-05 02:22:27.995563
+import boto3

# 2017-10-05 02:22:40.429139
+s3client = boto3.client('s3')

# 2017-10-05 02:23:19.313749
+item = s3client.get(Bucket='rick-ses-email-test', Key='testemails/4ur3paou9btejh8gino92gpo678b5lhhpddchtg1')

# 2017-10-05 02:23:29.818139
+item = s3client.get_object(Bucket='rick-ses-email-test', Key='testemails/4ur3paou9btejh8gino92gpo678b5lhhpddchtg1')

# 2017-10-05 02:23:38.347220
+item

# 2017-10-05 02:23:49.009070
+json.dumps(item)

# 2017-10-05 02:23:53.951983
+import json

# 2017-10-05 02:24:00.692620
+json.dumps(item)

# 2017-10-05 02:24:24.543152
+newdict = {}

# 2017-10-05 02:25:24.774982
+for key, value in item.items():
+    try:
+        json.dumps(value)
+        newdict[key] = value
+    except TypeError:
+        continue

# 2017-10-05 02:25:27.071398
+newdict

# 2017-10-05 02:25:31.231730
+json.dumps(newdict)

# 2017-10-05 02:25:36.016037
+json.dumps(newdict, indent=2)

# 2017-10-05 02:25:41.012278
+print(_)

# 2017-10-05 02:25:50.880384
+item

# 2017-10-05 02:25:57.297287
+item['Body']

# 2017-10-05 02:26:05.372052
+print(item['Body'])

# 2017-10-05 02:27:25.945797
+print(str(item['Body']))

# 2017-10-05 02:27:58.203120
+print(item['Body'].read())

# 2017-10-05 02:30:41.612570
+str(item['Body'].read())

# 2017-10-05 02:31:07.236888
+data = item['Body'].read()

# 2017-10-05 02:31:08.670276
+dat

# 2017-10-05 02:31:10.307480
+data

# 2017-10-05 02:31:20.780805
+import email

# 2017-10-05 02:31:24.478514
+print(data)

# 2017-10-05 02:31:29.667304
+print(item['Body'].read())

# 2017-10-05 02:32:00.262113
+item = s3client.get_object(Bucket='rick-ses-email-test', Key='testemails/4ur3paou9btejh8gino92gpo678b5lhhpddchtg1')

# 2017-10-05 02:32:14.977908
+s3client = boto3.client('s3')

# 2017-10-05 02:32:21.574582
+item = s3client.get_object(Bucket='rick-ses-email-test', Key='testemails/4ur3paou9btejh8gino92gpo678b5lhhpddchtg1')

# 2017-10-05 02:33:01.999068
+print(item['Body'].read())

# 2017-10-05 02:33:11.069762
+data = item['Body'].read()

# 2017-10-05 02:33:11.918374
+data

# 2017-10-05 02:33:16.047309
+print(item['Body'].read())

# 2017-10-05 02:33:20.773998
+s3client = boto3.client('s3')

# 2017-10-05 02:33:24.294330
+item = s3client.get_object(Bucket='rick-ses-email-test', Key='testemails/4ur3paou9btejh8gino92gpo678b5lhhpddchtg1')

# 2017-10-05 02:33:28.445122
+data = item['Body'].read()

# 2017-10-05 02:33:29.892327
+data

# 2017-10-05 02:33:55.325470
+msg = email.message_from_bytes(data)

# 2017-10-05 02:33:56.791423
+msg

# 2017-10-05 02:34:03.100054
+msg['from']

# 2017-10-05 02:34:07.214267
+msg['to']

# 2017-10-05 02:34:10.138520
+msg['bcc']

# 2017-10-05 02:34:22.209786
+def get_msg_text(mess):
+    """Finds the text body of a message and returns it."""
+    if mess.is_multipart():
+        return get_msg_text(mess.get_payload(0))
+    return mess.get_payload(None, True).decode('utf-8')

# 2017-10-05 02:34:34.407942
+text = get_msg_text(msg)

# 2017-10-05 02:34:35.523095
+test

# 2017-10-05 02:34:36.771194
+text

# 2017-10-05 02:41:43.520629
+post_text = ('from: {}\n'.format(data['from']) + 'to: {}'.format(data['to'])
+                 + 'subject: {}\n'.format(data['subject'])
+                 + 'message: {}'.format(emailtext))

# 2017-10-05 02:42:09.630858
+post_text = ('from: {}\n'.format(data['from']) + 'to: {}'.format(data['to'])
+                 + 'subject: {}\n'.format(data['subject'])
+                 + 'message: {}'.format(text))

# 2017-10-05 02:42:42.559189
+post_text = ('from: {}\n'.format(msg['from']) + 'to: {}'.format(msg['to'])
+                 + 'subject: {}\n'.format(msg['subject'])
+                 + 'message: {}'.format(text))

# 2017-10-05 02:42:47.058353
+post_text

# 2017-10-06 13:50:06.224632
+import slackperson

# 2017-10-06 13:50:09.212067
+import slackmentions

# 2017-10-06 19:28:56.643030
+import airtable

# 2017-10-06 19:29:35.776200
+import os

# 2017-10-06 19:29:38.006565
+import airtable

# 2017-10-06 19:29:49.923935
+ATDB = os.environ['ATDB']

# 2017-10-06 19:29:59.847629
+ATKEY = os.environ['ATKEY']

# 2017-10-06 19:30:16.479999
+from airtable.airtable import Airtable

# 2017-10-06 19:30:38.680764
+db = Airtable(api_key=ATKEY, base_id=ATDB)

# 2017-10-06 19:31:13.024426
+import time

# 2017-10-06 19:31:49.059162
+import uuid

# 2017-10-06 19:31:58.213568
+uuid.uuid4()

# 2017-10-06 19:32:14.467677
+str(uuid.uuid4())[0:5]

# 2017-10-06 19:32:17.096119
+str(uuid.uuid4())

# 2017-10-06 19:34:18.602999
+data = {'Number': 0, 'UUID': str(uuid.uuid4())}

# 2017-10-06 19:34:28.826337
+db.create(table='giant_table', data=data)

# 2017-10-06 19:34:37.475383
+db.create('giant_table', data)

# 2017-10-06 19:40:19.475434
+os.getcwd()

# 2017-10-06 19:42:14.547855
+import s3interface

# 2017-10-06 19:44:33.211313
+Path('~', 'tmp', 'garbagefiles')

# 2017-10-06 19:44:37.822586
+from pathlib import Path

# 2017-10-06 19:44:39.443828
+Path('~', 'tmp', 'garbagefiles')

# 2017-10-06 19:44:57.496838
+file1 = Path(_, 'file1.txt')

# 2017-10-06 19:45:35.611670
+with open(file1, 'r') as file1:
+    file1.read()

# 2017-10-06 19:45:46.944741
+import os

# 2017-10-06 19:45:55.706444
+os.path.expanduser('~')

# 2017-10-06 19:46:08.499548
+Path(_, 'tmp', 'garbagefiles', 'file1.txt')

# 2017-10-06 19:46:15.447945
+assert os.path.exists(_)

# 2017-10-06 19:46:20.936871
+assert os.path.exists(file1)

# 2017-10-06 19:46:29.159765
+file1 = Path(_, 'tmp', 'garbagefiles', 'file1.txt')

# 2017-10-06 19:46:57.638879
+s3interface.make_url(filename=file1, bucket=ricksencryptedbucket)

# 2017-10-06 19:47:03.417608
+s3interface.make_url(filename=file1, bucket='ricksencryptedbucket')

# 2017-10-06 19:47:24.377286
+s3interface.make_url(filename=str(file1), bucket='ricksencryptedbucket')

# 2017-10-06 19:47:51.582235
+Path('/home', 'rick', 'tmp', 'garbagefiles', 'file1.txt')

# 2017-10-06 19:47:53.147441
+s3interface.make_url(filename=str(file1), bucket='ricksencryptedbucket')

# 2017-10-06 19:49:06.693769
+file1 = Path('/home', 'rick', 'tmp', 'garbagefiles', 'file1.txt')

# 2017-10-06 19:49:08.371247
+s3interface.make_url(filename=str(file1), bucket='ricksencryptedbucket')

# 2017-10-06 19:52:01.868687
+import s3interface

# 2017-10-06 19:52:05.695005
+from pathlib import Path

# 2017-10-06 19:52:11.349589
+import os

# 2017-10-06 19:52:15.320330
+file1 = Path('/home', 'rick', 'tmp', 'garbagefiles', 'file1.txt')

# 2017-10-06 19:52:19.674784
+s3interface.make_url(filename=str(file1), bucket='ricksencryptedbucket')

# 2017-10-06 19:53:26.912719
+files = Path('/home', 'rick', 'tmp', 'garbagefiles')

# 2017-10-06 19:53:46.761115
+for item in os.listdir(files):
+    print(item)

# 2017-10-06 19:54:11.637877
+from airtable.airtable import Airtable

# 2017-10-06 19:54:37.250034
+Airtable(api_key=os.environ['ATKEY'], base_id=os.environ['ATDB'])

# 2017-10-06 19:54:41.346921
+db = _

# 2017-10-06 19:54:42.267063
+db

# 2017-10-06 19:55:24.563301
+from uuid import uuid5

# 2017-10-06 19:55:26.170279
+from uuid import uuid4

# 2017-10-06 19:56:09.726487
+data = {'Number': 1, 'UUID': str(uuid4()), 'Attachments': 'https://ricksencryptedbucket.s3.amazonaws.com/garbagefiles/file1.txt?AWSAccessKeyId=AKIAI42XBJEQPM4UDUPQ&Signature=0xet1gEj3%2F%2BNeKW1Q8EsOOk0L7g%3D&Expires=1507337539'}

# 2017-10-06 19:56:18.609498
+db.create('giant_table', data)

# 2017-10-06 19:56:40.036124
+os.environ['ATKEY']

# 2017-10-06 19:57:02.743887
+os.environ['ATDB']

# 2017-10-06 19:57:18.272211
+db = Airtable(api_key=os.environ['ATKEY'], base_id=os.environ['ATDB'])

# 2017-10-06 19:57:22.432126
+db.create('giant_table', data)

# 2017-10-06 19:57:40.062799
+db.create('giant_table', {'Number': 2})

# 2017-10-06 19:57:57.388343
+u = str(uuid4())

# 2017-10-06 19:57:58.846778
+u

# 2017-10-06 19:58:08.037400
+url = "https://ricksencryptedbucket.s3.amazonaws.com/garbagefiles/file1.txt?AWSAccessKeyId=AKIAI42XBJEQPM4UDUPQ&Signature=0xet1gEj3%2F%2BNeKW1Q8EsOOk0L7g%3D&Expires=1507337539"

# 2017-10-06 19:58:44.917065
+data = {'Number': 2, 'UUID': u}

# 2017-10-06 19:58:52.084881
+db.create('giant_table', data)

# 2017-10-06 19:59:04.411314
+data['Attachments'] = url

# 2017-10-06 19:59:07.107874
+data

# 2017-10-06 19:59:24.425770
+db.create('giant_table', data)

# 2017-10-06 19:59:55.156711
+import requests

# 2017-10-06 20:00:01.521324
+requtests.get("https://ricksencryptedbucket.s3.amazonaws.com/garbagefiles/file1.txt?AWSAccessKeyId=AKIAI42XBJEQPM4UDUPQ&Signature=0xet1gEj3%2F%2BNeKW1Q8EsOOk0L7g%3D&Expires=1507337539")

# 2017-10-06 20:00:14.474265
+requests.get("https://ricksencryptedbucket.s3.amazonaws.com/garbagefiles/file1.txt?AWSAccessKeyId=AKIAI42XBJEQPM4UDUPQ&Signature=0xet1gEj3%2F%2BNeKW1Q8EsOOk0L7g%3D&Expires=1507337539")

# 2017-10-06 20:00:21.417508
+_

# 2017-10-06 20:00:25.730518
+_.content

# 2017-10-06 20:00:49.226971
+data['Attachments'] = [url]

# 2017-10-06 20:00:54.460980
+db.create('giant_table', data)

# 2017-10-06 20:01:45.984314
+data['Attachments'] = [{"url": url}]

# 2017-10-06 20:01:49.538555
+db.create('giant_table', data)

# 2017-10-06 20:29:25.324157
+import names

# 2017-10-06 20:29:26.254308
+names

# 2017-10-06 20:29:32.471667
+names.get_full_name()

# 2017-10-06 20:31:02.979097
+names.get_first_name()

# 2017-10-06 20:31:07.205760
+names.get_last_name()

# 2017-10-06 20:32:40.574978
+random()

# 2017-10-06 20:32:42.952237
+import random

# 2017-10-06 20:32:45.621184
+random()

# 2017-10-06 20:32:52.047412
+random.randint()

# 2017-10-06 20:33:11.884315
+random.randrange(100,999)

# 2017-10-06 20:33:17.907333
+random.randrange(000,999)

# 2017-10-06 20:33:23.608627
+random.randrange(000,100)

# 2017-10-06 20:34:10.449347
+a =random.randrange(0,999)

# 2017-10-06 20:34:18.895572
+b = random.randrange(0,999)

# 2017-10-06 20:34:26.626843
+c = random.randrange(0,9999)

# 2017-10-06 20:34:59.988986
+print('{:03d}-{:03d}-{:04d}'.format(a, b, c))

# 2017-10-06 20:36:09.000877
+a =random.randrange(0,100)

# 2017-10-06 20:36:10.518968
+print('{:03d}-{:03d}-{:04d}'.format(a, b, c))

# 2017-10-06 20:36:20.156872
+print('{03:d}-{:03d}-{:04d}'.format(a, b, c))

# 2017-10-06 20:36:26.619923
+print('{d:03}-{:03d}-{:04d}'.format(a, b, c))

# 2017-10-06 20:36:37.798964
+print('{3:0d}-{:03d}-{:04d}'.format(a, b, c))

# 2017-10-06 20:47:06.713176
+import random

# 2017-10-06 20:47:13.813939
+bool(random.randrange(0,1))

# 2017-10-06 20:47:19.422468
+bool(random.randrange(0,2))

# 2017-10-06 20:47:30.990277
+bool(1)

# 2017-10-06 20:47:35.707997
+bool(0)

# 2017-10-06 20:47:45.067880
+random.randrange(0, 2)

# 2017-10-06 20:47:50.378533
+bool(_)

# 2017-10-06 20:47:56.698557
+random.randrange(0, 1)

# 2017-10-06 20:48:03.909724
+random.randrange(0, 2)

# 2017-10-06 21:15:22.476703
+import airtable_python_wrapper

# 2017-10-06 21:15:33.158602
+import airtable

# 2017-10-06 21:16:40.510942
+table = airtable.Airtable(base_key=os.environ['ATDB'], api_key=os.environ['ATKEY'], table='giant_table')

# 2017-10-06 21:16:43.715897
+import os

# 2017-10-06 21:16:44.888492
+table = airtable.Airtable(base_key=os.environ['ATDB'], api_key=os.environ['ATKEY'], table='giant_table')

# 2017-10-06 21:16:55.313453
+table = airtable.Airtable(base_key=os.environ['ATDB'], api_key=os.environ['ATKEY'], table_name='giant_table')

# 2017-10-06 21:16:56.981013
+table

# 2017-10-06 21:17:04.316778
+table.get_all()

# 2017-10-06 21:22:35.362098
+import airtable

# 2017-10-06 21:22:43.414392
+airtable.__package__

# 2017-10-06 21:30:43.352737
+test = {'item': 'value1', 'item': 'value2'}

# 2017-10-06 21:30:46.734925
+test['item']

# 2017-10-06 21:30:53.641239
+test.get('item')

# 2017-10-06 21:30:57.738110
+test

# 2017-10-06 21:55:20.239564
+test1 = ['zero', 'one', 'two', 'three']

# 2017-10-06 21:55:44.835239
+for i,j in test1.iteritems():
+    print('i: {}, j: {}'.format(i,j))

# 2017-10-06 21:55:55.005698
+for i,j in test1.iter():
+    print('i: {}, j: {}'.format(i,j))

# 2017-10-06 21:56:09.619470
+for i,j in enumerate(test1):
+    print('i: {}, j: {}'.format(i,j))

# 2017-10-06 22:16:27.341268
+assert []

# 2017-10-06 22:16:31.911035
+assert ['hi']

# 2017-10-06 22:16:33.628588
+exit

# 2017-10-06 22:22:21.572888
+import os

# 2017-10-06 22:22:27.899939
+os.listdir('tmpdata')

# 2017-10-06 22:42:51.101158
+import base64

# 2017-10-06 22:43:09.177587
+data = base64.b64encode(b'this is a test')

# 2017-10-06 22:43:10.182669
+data

# 2017-10-06 22:43:21.442419
+base64.b64decode(data)

# 2017-10-06 23:12:40.061642
+import base64

# 2017-10-06 23:15:55.655112
+with open('bigbin.tmp', 'rb') as binfile:
+    data = binfile.read()

# 2017-10-06 23:15:58.452170
+import sys

# 2017-10-06 23:16:04.246084
+sys.getsizeof(data)

# 2017-10-06 23:16:25.180506
+test = 'one two three four'

# 2017-10-06 23:16:30.631156
+sys.getsizeof(test)

# 2017-10-07 03:10:34.500946
+import urllib

# 2017-10-07 03:10:46.969163
+urllib.parse.quote('Thing/Otherthing')

# 2017-10-07 03:10:51.724911
+urllib.parse.quote('Thing/Otherthing', safe='')

# 2017-10-07 03:12:24.817456
+exit

# 2017-10-07 11:39:26.441519
+from urllib.parse import quote

# 2017-10-07 11:39:35.452186
+from urllib.parse import join

# 2017-10-07 11:39:49.647121
+import urllib.parse

# 2017-10-07 11:40:09.828941
+quote('Test table 1')

# 2017-10-07 11:40:18.628098
+quote('Test/Table 2')

# 2017-10-07 11:40:59.529312
+quote('Test/Table 2', safe='')

# 2017-10-07 11:41:26.869755
+quote('Another (test) table', safe='')

# 2017-10-07 11:42:05.298774
+quote('A & test & table')

# 2017-10-07 11:44:16.180094
+urllib.parse.urljoin('https://api.airtable.com', 'v0', quote('A & test & table', safe=''))

# 2017-10-07 11:44:26.524640
+urllib.parse.urljoin('https://api.airtable.com', 'v0', str(quote('A & test & table', safe='')))

# 2017-10-07 11:44:47.882284
+baseurl = urllib.parse.urljoin('https://api.airtable.com', 'v0')

# 2017-10-07 11:44:49.686884
+baseulr

# 2017-10-07 11:44:51.672973
+baseurl

# 2017-10-07 11:45:14.944866
+urllib.parse.urljoin(baseurl, quote('A & test & table', safe=''))

# 2017-10-07 11:45:47.669279
+baseurl = urllib.parse.urljoin(baseurl, 'app123456789a')

# 2017-10-07 11:45:49.179795
+baseulr

# 2017-10-07 11:45:51.223757
+baseurl

# 2017-10-07 11:46:18.129970
+urllib.parse.urljoin(baseurl, quote('Test/table 1', safe=''))

# 2017-10-07 11:48:04.129736
+quote('percentabe % table', safe='')

# 2017-10-07 14:47:00.423997
+import subprocess

# 2017-10-07 14:47:22.826533
+out = subprocess.run(['git', 'show-ref'], stdout=subproces.PIPE)

# 2017-10-07 14:47:27.760365
+out = subprocess.run(['git', 'show-ref'], stdout=subprocess.PIPE)

# 2017-10-07 14:47:29.088668
+out

# 2017-10-07 14:47:31.614308
+out.stdout

# 2017-10-07 14:47:43.037954
+out.stdout.decode('utf-8')[0:5]

# 2017-10-07 14:47:46.129822
+out.stdout.decode('utf-8')[0:7]

# 2017-10-07 18:16:15.388652
+import json

# 2017-10-07 18:16:30.989568
+def gen():
+    yield 20
+    yield 30
+    yield 40

# 2017-10-07 18:16:48.552328
+class StreamArray(list):
+    def __iter__(self):
+        return gen()

# 2017-10-07 18:17:04.999944
+a = StreamArray()

# 2017-10-07 18:17:08.448530
+json.dumps(a)

# 2017-10-07 18:30:11.185344
+import pickle

# 2017-10-07 18:30:16.808351
+import tempfile

# 2017-10-07 18:30:35.096802
+def gen():
+    for i in range(0,20):
+        yield i

# 2017-10-07 18:30:44.538716
+for item in gen():
+    print(item)

# 2017-10-07 18:30:54.387156
+def gen():
+    for i in range(0,20):
+        yield {'number': i}

# 2017-10-07 18:30:57.326434
+for item in gen():
+    print(item)

# 2017-10-07 18:31:39.830391
+with tempfile.TemporaryFile() as fp:
+    for item in gen():
+        pickle.dump(item, fp)
+    fp.seek(0)
+    data = fp.read()

# 2017-10-07 18:31:40.958649
+data

# 2017-10-07 18:31:55.007832
+with tempfile.TemporaryFile(mode='w') as fp:
+    for item in gen():
+        pickle.dump(item, fp)
+    fp.seek(0)
+    data = fp.read()

# 2017-10-07 18:32:13.645488
+with tempfile.TemporaryFile() as fp:
+    for item in gen():
+        pickle.dump(item, fp)
+    fp.seek(0)
+    data = pickle.load(fp)

# 2017-10-07 18:32:15.608393
+data

# 2017-10-07 18:32:37.153914
+with tempfile.TemporaryFile(mode='a') as fp:
+    for item in gen():
+        pickle.dump(item, fp)
+    fp.seek(0)
+    data = pickle.load(fp)

# 2017-10-07 18:32:45.219518
+with tempfile.TemporaryFile(mode='ab') as fp:
+    for item in gen():
+        pickle.dump(item, fp)
+    fp.seek(0)
+    data = pickle.load(fp)

# 2017-10-07 18:32:58.853589
+with tempfile.TemporaryFile(mode='arb') as fp:
+    for item in gen():
+        pickle.dump(item, fp)
+    fp.seek(0)
+    data = pickle.load(fp)

# 2017-10-07 18:38:35.101474
+import json

# 2017-10-07 18:38:37.803805
+import tempfile

# 2017-10-07 18:39:12.355706
+def gen():
+    for i in range(0, 51):
+        yield {'number': i}

# 2017-10-07 18:44:58.890072
+with tempfile.TemporaryDirectory as tmpdir:
+    tmplist = []
+    j = 0
+    for item in gen():
+        tmplist.append(item)
+        if len(tmplist) > 10:
+            with open(tmpdir + '/file{}'.format(j), 'w') as fp:
+                fp.write(tmplist)
+            tmplist = []
+            j += 1
+    with open(tmpdir + '/file{}'.format(j), 'w') as fp:
+        fp.write(tmplist)
+    data = []
+    for k in range(0, j + 1):
+        with open(tmpdir + '/file{}'.format(k), 'r') as fr:
+            data.extend(fp.read())

# 2017-10-07 18:45:19.571836
+from pathlib import Path

# 2017-10-07 18:46:13.369156
+with tempfile.TemporaryDirectory as tmpdir:
+    tmplist = []
+    j = 0
+    for item in gen():
+        tmplist.append(item)
+        if len(tmplist) > 10:
+            with open(Path(tmpdir, 'file{}'.format(j)), 'w') as fp:
+                fp.write(tmplist)
+            tmplist = []
+            j += 1
+    with open(Path(tmpdir, 'file{}'.format(j)), 'w') as fp:
+        fp.write(tmplist)
+    data = []
+    for k in range(0, j + 1):
+        with open(Path(tmpdir, 'file{}'.format(k)), 'r') as fr:
+            data.extend(fr.read())

# 2017-10-07 18:46:45.452923
+with tempfile.TemporaryDirectory() as tmpdir:
+    tmplist = []
+    j = 0
+    for item in gen():
+        tmplist.append(item)
+        if len(tmplist) > 10:
+            with open(Path(tmpdir, 'file{}'.format(j)), 'w') as fp:
+                fp.write(tmplist)
+            tmplist = []
+            j += 1
+    with open(Path(tmpdir, 'file{}'.format(j)), 'w') as fp:
+        fp.write(tmplist)
+    data = []
+    for k in range(0, j + 1):
+        with open(Path(tmpdir, 'file{}'.format(k)), 'r') as fr:
+            data.extend(fr.read())

# 2017-10-07 18:46:54.302987
+import pickle

# 2017-10-07 18:47:41.545471
+with tempfile.TemporaryDirectory() as tmpdir:
+    tmplist = []
+    j = 0
+    for item in gen():
+        tmplist.append(item)
+        if len(tmplist) > 10:
+            with open(Path(tmpdir, 'file{}'.format(j)), 'wb') as fp:
+                pickle.dump(fp, tmplist)
+            tmplist = []
+            j += 1
+    with open(Path(tmpdir, 'file{}'.format(j)), 'wb') as fp:
+        pickle.dump(fp, tmplist)
+    data = []
+    for k in range(0, j + 1):
+        with open(Path(tmpdir, 'file{}'.format(k)), 'r') as fr:
+            data.extend(pickle.load(fr))

# 2017-10-07 18:48:30.883305
+with tempfile.TemporaryDirectory() as tmpdir:
+    tmplist = []
+    j = 0
+    for item in gen():
+        tmplist.append(item)
+        if len(tmplist) > 10:
+            with open(Path(tmpdir, 'file{}'.format(j)), 'wb') as fp:
+                pickle.dump(tmplist, fp)
+            tmplist = []
+            j += 1
+    with open(Path(tmpdir, 'file{}'.format(j)), 'wb') as fp:
+        pickle.dump(tmplist, fp)
+    data = []
+    for k in range(0, j + 1):
+        with open(Path(tmpdir, 'file{}'.format(k)), 'r') as fr:
+            data.extend(pickle.load(fr))

# 2017-10-07 18:48:42.473675
+with tempfile.TemporaryDirectory() as tmpdir:
+    tmplist = []
+    j = 0
+    for item in gen():
+        tmplist.append(item)
+        if len(tmplist) > 10:
+            with open(Path(tmpdir, 'file{}'.format(j)), 'wb') as fp:
+                pickle.dump(tmplist, fp)
+            tmplist = []
+            j += 1
+    with open(Path(tmpdir, 'file{}'.format(j)), 'wb') as fp:
+        pickle.dump(tmplist, fp)
+    data = []
+    for k in range(0, j + 1):
+        with open(Path(tmpdir, 'file{}'.format(k)), 'rb') as fr:
+            data.extend(pickle.load(fr))

# 2017-10-07 18:48:43.600520
+data

# 2017-10-07 18:58:21.852958
+import lzma

# 2017-10-07 18:58:42.892790
+mytext = 'This is a test of the test of the lzma compressor algorithm making sure it works'

# 2017-10-07 18:58:57.336203
+compressor = lzma.LZMACompressor()

# 2017-10-07 18:59:09.639518
+compressor.compress(mytext)

# 2017-10-07 18:59:18.909986
+compressor.compress(mytext.encode('utf-8'))

# 2017-10-07 18:59:34.960032
+compressed = compressor.flush()

# 2017-10-07 18:59:36.994960
+compressed

# 2017-10-07 18:59:55.455854
+decompressort = lzma.LZMADecompressor()

# 2017-10-07 18:59:59.364332
+decompressor = lzma.LZMADecompressor()

# 2017-10-07 19:00:06.919898
+decompressor.decompress(compressed)

# 2017-10-07 19:01:19.408174
+lzma.decompress(compressed)

# 2017-10-07 19:01:24.958356
+compressed

# 2017-10-07 19:01:49.278776
+compressed.decode('utf-8')

# 2017-10-07 19:02:24.994648
+comp = lzma.compress(mytext)

# 2017-10-07 19:02:30.930601
+comp = lzma.compress(mytext.encode('utf-8'))

# 2017-10-07 19:02:32.280808
+comp

# 2017-10-07 19:02:41.819173
+decomp = lzma.decompress(comp)

# 2017-10-07 19:02:43.814658
+decomp

# 2017-10-07 19:02:57.165913
+assert mytext == decomp.decode('utf-8')

# 2017-10-07 19:04:59.029254
+import base64

# 2017-10-07 19:05:19.918388
+compdata = base64.b64encode('dGhpcyBpcyBmaWxlIDI4MA==')

# 2017-10-07 19:05:23.784255
+compdata = base64.b64encode(b'dGhpcyBpcyBmaWxlIDI4MA==')

# 2017-10-07 19:05:26.068925
+compdata

# 2017-10-07 19:05:34.161173
+compdata = base64.b64decode(b'dGhpcyBpcyBmaWxlIDI4MA==')

# 2017-10-07 19:05:35.889851
+compdata

# 2017-10-07 19:08:32.847158
+compdata = base64.b64decode(b'/Td6WFoAAATm1rRGAgAhARYAAAB0L+WjAQAPdGhpcyBpcyBmaWxlIDIxMAC+a8m7oE8UZgABKBDlC2xgH7bzfQEAAAAABFla')

# 2017-10-07 19:08:35.976947
+compdata

# 2017-10-07 19:08:47.185023
+lzma.decompress(compdata)

# 2017-10-07 20:00:45.858386
+import airtable

# 2017-10-07 20:00:55.418961
+BASE=os.environ['ATDB']

# 2017-10-07 20:00:58.566755
+import os

# 2017-10-07 20:01:00.211650
+BASE=os.environ['ATDB']

# 2017-10-07 20:48:42.312236
+import better_exceptions

# 2017-10-07 20:48:47.257322
+raise Exception

# 2017-10-07 20:49:01.959738
+assert 10 == 20

# 2017-10-07 20:49:42.246555
+with open('no', 'r') as file:
+    file.read()

# 2017-10-08 00:18:22.192981
+import pickle

# 2017-10-08 00:18:47.790217
+with open('lots_of_fields.pickle', 'rb') as datafile:
+    data = pickle.load(datafile)

# 2017-10-08 00:18:59.058031
+with open('lots_of_fields_data.pickle', 'rb') as datafile:
+    data = pickle.load(datafile)

# 2017-10-08 00:19:02.540970
+data

# 2017-10-08 00:19:12.576146
+names = []

# 2017-10-08 00:20:11.014280
+import pickle

# 2017-10-08 00:20:17.321374
+with open('lots_of_fields_data.pickle', 'rb') as datafile:
+    data = pickle.load(datafile)

# 2017-10-08 00:20:23.650252
+data[0]['Name']

# 2017-10-08 00:20:45.573049
+names = [item['Name'] for item in data]

# 2017-10-08 00:20:46.816974
+names

# 2017-10-08 00:21:11.149036
+assert len(names) == 20

# 2017-10-08 00:21:22.494591
+assert 'Chad Guenther' in names

# 2017-10-08 00:21:48.571509
+with open('pyhashes.pickle', 'rb') as hashfile:
+    hashes = pickle.load(hashfile)

# 2017-10-08 00:21:50.335820
+hashes

# 2017-10-08 00:23:54.225614
+import base64

# 2017-10-08 00:25:59.454355
+for item in data:
+    attach = item['Attachments'][0]
+    filename = attach['filename']
+    rawfiledata = base64.b64decode(attach['filedata'])
+    if attach['compressed']:
+        filedata = lzma.decompress(rawfiledata)

# 2017-10-08 00:26:38.228337
+for key in data[0]:
+    print(key)

# 2017-10-08 00:26:49.293322
+for key in data[0]['Attachments'][0]:
+    print(key)

# 2017-10-08 00:26:54.590294
+import lzma

# 2017-10-08 00:26:57.379883
+import hashlib

# 2017-10-08 00:28:44.051420
+for item in data:
+    attach = item['Attachments'][0]
+    filename = attach['filename']
+    rawfiledata = base64.b64decode(attach['data'])
+    if attach['compressed']:
+        filedata = lzma.decompress(rawfiledata)
+    else:
+        filedata = rawfiledata
+    filehash = haslib.md5(filedata).hexdigest()
+    assert 0

# 2017-10-08 00:29:04.083061
+print(data[0]['Attachments'][0]['md5hash'])

# 2017-10-08 00:30:02.595496
+for item in data:
+    assert 0
+    attach = item['Attachments'][0]
+    filename = attach['filename']
+    rawfiledata = base64.b64decode(attach['data'])
+    if attach['compressed']:
+        filedata = lzma.decompress(rawfiledata)
+    else:
+        filedata = rawfiledata
+    filehash = haslib.md5(filedata).hexdigest()
+    assert str(filehash) == attach['md5hash']
+

# 2017-10-08 00:30:07.047531
+hashes

# 2017-10-08 00:30:13.982568
+readhashes = {}

# 2017-10-08 00:30:44.799724
+for item in data:
+    assert 0
+    attach = item['Attachments'][0]
+    filename = attach['filename']
+    rawfiledata = base64.b64decode(attach['data'])
+    if attach['compressed']:
+        filedata = lzma.decompress(rawfiledata)
+    else:
+        filedata = rawfiledata
+    filehash = hashlib.md5(filedata).hexdigest()
+    assert str(filehash) == attach['md5hash']
+    readhashes[filename] = filehash
+

# 2017-10-08 00:31:01.141198
+for item in data:
+    attach = item['Attachments'][0]
+    filename = attach['filename']
+    rawfiledata = base64.b64decode(attach['data'])
+    if attach['compressed']:
+        filedata = lzma.decompress(rawfiledata)
+    else:
+        filedata = rawfiledata
+    filehash = hashlib.md5(filedata).hexdigest()
+    assert str(filehash) == attach['md5hash']
+    readhashes[filename] = filehash

# 2017-10-08 00:31:16.224656
+readhashes

# 2017-10-08 00:31:35.609773
+for key, value in readhashes:
+    assert hashes[key] == value

# 2017-10-08 00:31:46.248840
+for key, value in readhashes.items():
+    assert hashes[key] == value

# 2017-10-08 00:58:37.864848
+import boto3

# 2017-10-08 00:58:49.025163
+s3 = boto3.resource('s3')

# 2017-10-08 00:59:42.800353
+s3client = boto3.client('s3')

# 2017-10-08 01:00:18.994344
+import boto3

# 2017-10-08 01:00:24.810096
+s3client = boto3.client('s3')

# 2017-10-08 01:00:46.212283
+import os

# 2017-10-08 01:00:58.941523
+BUCKET = os.environ['CONFIG_BUCKET']

# 2017-10-08 01:01:09.102490
+PREFIX = os.environt['CONFIG_PREFIX']

# 2017-10-08 01:01:12.721507
+PREFIX = os.environ['CONFIG_PREFIX']

# 2017-10-08 01:01:35.700475
+TABLE_KEY = PREFIX + '/tables'

# 2017-10-08 01:01:48.218961
+PHRASES_KEY = PREFIX + '/phrases'

# 2017-10-08 01:02:18.986446
+tables = s3client.get_object(Bucket=BUCKET, Key=TABLE_KEY)

# 2017-10-08 01:02:20.476367
+tables

# 2017-10-08 01:02:46.281836
+tables_obj = s3client.get_object(Bucket=BUCKET, Key=TABLE_KEY)

# 2017-10-08 01:02:56.297212
+tables = table_obj['Body'].read()

# 2017-10-08 01:03:01.569590
+tables = tables_obj['Body'].read()

# 2017-10-08 01:03:03.225836
+tables

# 2017-10-08 01:03:32.396118
+tables_obj = s3client.get_object(Bucket=BUCKET, Key=PHRASES_KEY)

# 2017-10-08 01:03:40.584505
+phrases_obj = s3client.get_object(Bucket=BUCKET, Key=PHRASES_KEY)

# 2017-10-08 01:04:10.976099
+phrases = [x.strip for x in phrases_obj['Body'].read().decode('utf-8')]

# 2017-10-08 01:04:13.125569
+phrases

# 2017-10-08 01:04:23.677773
+phrases_obj = s3client.get_object(Bucket=BUCKET, Key=PHRASES_KEY)

# 2017-10-08 01:04:30.521044
+phrases = [x.strip() for x in phrases_obj['Body'].read().decode('utf-8')]

# 2017-10-08 01:04:32.420119
+phrases

# 2017-10-08 01:04:49.069780
+phrases = [x.strip() for x in phrases_obj['Body'].read().decode('utf-8').split('\n')]

# 2017-10-08 01:04:52.170308
+phrases

# 2017-10-08 01:04:55.260725
+phrases_obj = s3client.get_object(Bucket=BUCKET, Key=PHRASES_KEY)

# 2017-10-08 01:04:56.879748
+phrases = [x.strip() for x in phrases_obj['Body'].read().decode('utf-8').split('\n')]

# 2017-10-08 01:05:02.029363
+phrases

# 2017-10-08 01:05:21.733642
+phrases = [x.strip() for x in phrases_obj['Body'].read().decode('utf-8').split('\n') and x]

# 2017-10-08 01:05:30.132754
+phrases_obj = s3client.get_object(Bucket=BUCKET, Key=PHRASES_KEY)

# 2017-10-08 01:05:32.017433
+phrases = [x.strip() for x in phrases_obj['Body'].read().decode('utf-8').split('\n') and x]

# 2017-10-08 01:06:03.988411
+phrases_obj = s3client.get_object(Bucket=BUCKET, Key=PHRASES_KEY)

# 2017-10-08 01:06:38.795644
+phrases_str = phrases_obj['Body'].read().decode('utf-8').strip().split('\n')

# 2017-10-08 01:06:41.893544
+phrases_str

# 2017-10-08 01:07:25.626205
+import configp

# 2017-10-08 01:07:27.227221
+import configparser

# 2017-10-08 01:07:35.389511
+config = configparser.ConfigParser()

# 2017-10-08 01:07:48.973460
+config.read(tables)

# 2017-10-08 01:07:57.771844
+config.read(tables.decode('utf-8'))

# 2017-10-08 01:08:02.883072
+tables

# 2017-10-08 01:08:27.174269
+tables.decode('utf-8')

# 2017-10-08 01:08:32.801573
+tab = _

# 2017-10-08 01:08:33.664378
+tab

# 2017-10-08 01:08:37.665236
+config.read(tab)

# 2017-10-08 01:08:40.384273
+config

# 2017-10-08 01:08:48.096067
+config['Tasks Table']

# 2017-10-08 01:09:09.159184
+import tempfile

# 2017-10-08 01:16:11.672403
+import pyyaml

# 2017-10-08 01:16:14.762171
+import yaml

# 2017-10-08 01:16:36.960601
+with open('test.yaml', 'r') as yfile:
+    stuff = yaml.load(yfile)

# 2017-10-08 01:16:38.244797
+stuff

# 2017-10-08 01:23:10.058561
+import yaml

# 2017-10-08 01:23:32.817730
+with open('conf.yaml', 'r') as conffile:
+    config = yaml.load(conffile)

# 2017-10-08 01:23:34.274733
+config

# 2017-10-08 01:24:04.212473
+print(json.dumps(config, indent=2))

# 2017-10-08 01:24:09.511081
+import json

# 2017-10-08 01:24:10.511425
+print(json.dumps(config, indent=2))

# 2017-10-08 01:25:10.077207
+config['Parse']['Sender Filter']

# 2017-10-08 01:25:26.774611
+config['Parse']['Termination Character']

# 2017-10-08 01:25:41.759234
+print(config['Parse']['Termination Character'])

# 2017-10-08 01:26:12.997187
+import subprocess

# 2017-10-08 01:26:26.836846
+subprocess.run(['gvim', 'conf.yaml'])

# 2017-10-08 01:26:41.497863
+with open('conf.yaml', 'r') as conffile:
+    config = yaml.load(conffile)

# 2017-10-08 01:26:56.366160
+config['Parse']['Termination Character']

# 2017-10-08 01:29:34.447582
+import yaml

# 2017-10-08 01:29:37.991228
+with open('conf.yaml', 'r') as conffile:
+    config = yaml.load(conffile)

# 2017-10-08 01:29:40.639281
+config['Parse']['Termination Character']

# 2017-10-08 01:29:44.329790
+termchar = _

# 2017-10-08 01:29:46.017575
+termchar

# 2017-10-08 01:29:48.355906
+import re

# 2017-10-08 01:30:12.583600
+truncate = re.compile(r'^(.*){}'.format(term_char), re.DOTALL|re.I)

# 2017-10-08 01:30:16.762365
+truncate = re.compile(r'^(.*){}'.format(termchar), re.DOTALL|re.I)

# 2017-10-08 01:30:53.678111
+text = 'this is a test of the emergency broadcast system\ndh if it were not a test, you would hear screaming'

# 2017-10-08 01:30:54.914489
+text

# 2017-10-08 01:31:16.490335
+search_text = truncate.search(text)

# 2017-10-08 01:31:22.527101
+search_text.group(1)

# 2017-10-08 01:31:46.694870
+exit

# 2017-10-08 19:02:14.520223
+str(None)

# 2017-10-08 19:02:20.942910
+None + 'hi'

# 2017-10-08 02:08:47.254772
+import boto3

# 2017-10-08 02:08:50.097135
+import yaml

# 2017-10-08 02:08:59.899125
+s3client = boto3.client('s3')

# 2017-10-08 02:09:49.628762
+import boto3

# 2017-10-08 02:09:52.034290
+import yaml

# 2017-10-08 02:09:58.812620
+s3client = boto3.client('s3')

# 2017-10-08 02:10:19.300617
+import os

# 2017-10-08 02:10:28.900827
+confbucket = os.environ['CONFIG_BUCKET']

# 2017-10-08 02:10:39.205023
+confprefix = os.environ['CONFIG_PREFIX']

# 2017-10-08 02:10:53.332982
+from pathlib import Path

# 2017-10-08 02:11:04.153175
+Path(confprefix, 'config.yaml')

# 2017-10-08 02:11:15.228207
+configkey = _

# 2017-10-08 02:11:19.389456
+str(configkey)

# 2017-10-08 02:11:47.045362
+configyaml = s3client.get_object(Bucket=confbucket, Key=str(configkey))

# 2017-10-08 02:12:05.182401
+configdata = configyaml['Body'].read()

# 2017-10-08 02:12:07.169493
+configdata

# 2017-10-08 02:12:31.617465
+config = yaml.load(configdata.decode('utf-8'))

# 2017-10-08 02:12:32.821143
+config

# 2017-10-08 02:12:47.320663
+import json

# 2017-10-08 02:12:56.726778
+print(json.dumps(config))

# 2017-10-08 02:13:03.843783
+print(json.dumps(config), indent=1)

# 2017-10-08 02:13:16.255314
+print(json.dumps(config, indent=1))

# 2017-10-08 02:51:45.721024
+import os

# 2017-10-08 02:51:54.067970
+os.environ.get('nope')

# 2017-10-08 02:52:08.253862
+os.environ.get('nome', 'hi')

# 2017-10-08 02:52:15.372619
+os.environ.get('HOME', 'hi')

# 2017-10-08 03:22:50.035096
+import airtable

# 2017-10-08 03:22:57.290039
+from airtable.airtable import Airtable

# 2017-10-08 03:24:26.505970
+import os

# 2017-10-08 03:24:43.504826
+Airtable(os.environ['ATDB'], os.environ['ATKEY'])

# 2017-10-08 03:24:48.501497
+db = _

# 2017-10-08 03:25:51.702629
+data = {'Name': 'test', 'Notes': 'test', 'person': [''], 'Files': ['']}

# 2017-10-08 03:26:01.318817
+db.create('My Study Cards', data)

# 2017-10-08 03:26:10.275460
+data = {'Name': 'test', 'Notes': 'test', 'person': [None], 'Files': [None]}

# 2017-10-08 03:26:12.858171
+db.create('My Study Cards', data)

# 2017-10-08 03:26:21.611266
+data = {'Name': 'test', 'Notes': 'test', 'person': None, 'Files': None}

# 2017-10-08 03:26:23.725898
+db.create('My Study Cards', data)

# 2017-10-09 01:12:19.480282
+import os

# 2017-10-09 01:12:21.470302
+import sys

# 2017-10-09 01:12:23.982677
+import threading

# 2017-10-09 01:12:26.458573
+import boto3

# 2017-10-09 01:13:47.589001
+import python

# 2017-10-09 01:13:50.493880
+import os

# 2017-10-10 22:54:56.625814
+t()
